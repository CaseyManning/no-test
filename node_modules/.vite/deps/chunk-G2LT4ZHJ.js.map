{
  "version": 3,
  "sources": ["../../troika-3d/node_modules/react/cjs/react.development.js", "../../troika-3d/node_modules/react/index.js", "../../troika-animation/dist/troika-animation.esm.js", "../../troika-3d/node_modules/troika-core/dist/troika-core.esm.js", "../../troika-3d/dist/troika-3d.esm.js"],
  "sourcesContent": ["/** @license React v16.14.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\nvar checkPropTypes = require('prop-types/checkPropTypes');\n\nvar ReactVersion = '16.14.0';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  suspense: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\nfunction describeComponentFrame (name, source, ownerName) {\n  var sourceInfo = '';\n\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n\n        if (match) {\n          var pathBeforeSlash = match[1];\n\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nvar Resolved = 1;\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type.render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\nvar currentlyValidatingElement = null;\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\\n    in') === 0;\n\n    if (!hasExistingStack) {\n      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n      var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n      if (stack !== '') {\n        format += '%s';\n        args = args.concat([stack]);\n      }\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error( \"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\" );\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error( \"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\" );\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\n\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error( \"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n  func.call(context, child, bookKeeping.count++);\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error( \"React.Children.only expected to receive a single React element child.\" );\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (unstable_observedBits !== undefined) {\n      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');\n    } // TODO: add a more generic warning for invalid values.\n\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  setCurrentlyValidatingElement(element);\n\n  {\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var name = getComponentName(type);\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      setCurrentlyValidatingElement(element);\n      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n      setCurrentlyValidatingElement(null);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true;\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    setCurrentlyValidatingElement(fragment);\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n    }\n\n    setCurrentlyValidatingElement(null);\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n{\n\n  try {\n    var frozenObject = Object.freeze({});\n    var testMap = new Map([[frozenObject, null]]);\n    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = ReactVersion;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "/*\n * Built-in easing functions for use in Troika animations. Any of the easings defined here\n * may be referred to within Tweens by their exported symbol name, or by reference.\n * \n * The implementations here are roughly based on the logic from the jQuery Easing plugin\n * (original license blocks are maintained below for completeness), but they have been\n * significantly rewritten to use a single 0-1 time argument signature, converted to ES2015\n * syntax, and otherwise modified for succinctness or performance.\n */\n\nconst {pow, PI, sqrt} = Math;\nconst HALF_PI = PI / 2;\nconst TWO_PI = PI * 2;\n\n\n// factories for common easing function patterns\nfunction makeInOut(inFn, outFn) {\n  return t => t < 0.5 ? inFn(t * 2) * 0.5 : outFn(t * 2 - 1) * 0.5 + 0.5\n}\nfunction makeExpIn(exp) {\n  return t => pow(t, exp)\n}\nfunction makeExpOut(exp) {\n  return t => 1 - pow(1 - t, exp)\n}\nfunction makeExpInOut(exp) {\n  return t => t < 0.5 ?\n    pow(t * 2, exp) * 0.5 :\n    (1 - pow(1 - (t * 2 - 1), exp)) * 0.5 + 0.5\n}\n\n\nconst linear = t => t;\n\nconst easeInQuad = makeExpIn(2);\nconst easeOutQuad = makeExpOut(2);\nconst easeInOutQuad = makeExpInOut(2);\n\nconst easeInCubic = makeExpIn(3);\nconst easeOutCubic = makeExpOut(3);\nconst easeInOutCubic = makeExpInOut(3);\n\nconst easeInQuart = makeExpIn(4);\nconst easeOutQuart = makeExpOut(4);\nconst easeInOutQuart = makeExpInOut(4);\n\nconst easeInQuint = makeExpIn(5);\nconst easeOutQuint = makeExpOut(5);\nconst easeInOutQuint = makeExpInOut(5);\n\nconst easeInSine = t => 1 - Math.cos(t * (HALF_PI));\nconst easeOutSine = t => Math.sin(t * (HALF_PI));\nconst easeInOutSine = t => -0.5 * (Math.cos(PI * t) - 1);\n\nconst easeInExpo = t =>\n  (t === 0) ? 0 : pow(2, 10 * (t - 1));\n\nconst easeOutExpo = t =>\n  (t === 1) ? 1 : 1 - pow(2, -10 * t);\n\nconst easeInOutExpo = t =>\n  (t === 0 || t === 1) ? t :\n  t < 0.5 ?\n    pow(2, 10 * (t * 2 - 1)) * 0.5 :\n    (1 - pow(2, -10 * (t * 2 - 1))) * 0.5 + 0.5;\n\nconst easeInCirc = t =>\n  1 - sqrt(1 - t * t);\n\nconst easeOutCirc = t =>\n  sqrt(1 - pow(t - 1, 2));\n\nconst easeInOutCirc = makeInOut(easeInCirc, easeOutCirc);\n\nconst easeInElastic = t =>\n  (t === 0 || t === 1) ? t : 1 - easeOutElastic(1 - t);\n\nconst easeOutElastic = t =>\n  (t === 0 || t === 1) ? t :\n    Math.pow(2, -10 * t) * Math.sin((t - 0.075) * TWO_PI / 0.3) + 1;\n\nconst easeInOutElastic = makeInOut(easeInElastic, easeOutElastic);\n\nconst easeInBack = t =>\n  t * t * (2.70158 * t - 1.70158);\n\nconst easeOutBack = t =>\n  (t -= 1) * t * (2.70158 * t + 1.70158) + 1;\n\nconst easeInOutBack = t => {\n  const s = 1.70158 * 1.525;\n  return (t *= 2) < 1 ? \n    0.5 * (t * t * ((s + 1) * t - s)) : \n    0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)\n};\n\nconst easeInBounce = t => \n  1 - easeOutBounce(1 - t);\n\nconst easeOutBounce = t => \n  t < (1 / 2.75) ? \n    (7.5625 * t * t) :\n  t < (2 / 2.75) ? \n    (7.5625 * (t -= (1.5 / 2.75)) * t + .75) :\n  t < (2.5 / 2.75) ? \n    (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) :\n    (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);\n\nconst easeInOutBounce = makeInOut(easeInBounce, easeOutBounce);\n\n// Aliases...?\n// export {\n//   easeInBack as swingFrom,\n//   easeOutBack as swingTo,\n//   easeInOutBack as swingFromTo,\n//   easeOutBounce as bounce,\n//   easeFrom\n// }\n\n\n\n\n\n// ===== License blocks from originating works: =====\n\n/*\n * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/\n *\n * Uses the built in easing capabilities added In jQuery 1.1\n * to offer multiple easing options\n *\n * TERMS OF USE - jQuery Easing\n *\n * Open source under the BSD License.\n *\n * Copyright Â© 2008 George McGinley Smith\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list\n * of conditions and the following disclaimer in the documentation and/or other materials\n * provided with the distribution.\n *\n * Neither the name of the author nor the names of contributors may be used to endorse\n * or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n*/\n\n/*\n *\n * TERMS OF USE - EASING EQUATIONS\n *\n * Open source under the BSD License.\n *\n * Copyright Â© 2001 Robert Penner\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list\n * of conditions and the following disclaimer in the documentation and/or other materials\n * provided with the distribution.\n *\n * Neither the name of the author nor the names of contributors may be used to endorse\n * or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\nvar Easings = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  linear: linear,\n  easeInQuad: easeInQuad,\n  easeOutQuad: easeOutQuad,\n  easeInOutQuad: easeInOutQuad,\n  easeInCubic: easeInCubic,\n  easeOutCubic: easeOutCubic,\n  easeInOutCubic: easeInOutCubic,\n  easeInQuart: easeInQuart,\n  easeOutQuart: easeOutQuart,\n  easeInOutQuart: easeInOutQuart,\n  easeInQuint: easeInQuint,\n  easeOutQuint: easeOutQuint,\n  easeInOutQuint: easeInOutQuint,\n  easeInSine: easeInSine,\n  easeOutSine: easeOutSine,\n  easeInOutSine: easeInOutSine,\n  easeInExpo: easeInExpo,\n  easeOutExpo: easeOutExpo,\n  easeInOutExpo: easeInOutExpo,\n  easeInCirc: easeInCirc,\n  easeOutCirc: easeOutCirc,\n  easeInOutCirc: easeInOutCirc,\n  easeInElastic: easeInElastic,\n  easeOutElastic: easeOutElastic,\n  easeInOutElastic: easeInOutElastic,\n  easeInBack: easeInBack,\n  easeOutBack: easeOutBack,\n  easeInOutBack: easeInOutBack,\n  easeInBounce: easeInBounce,\n  easeOutBounce: easeOutBounce,\n  easeInOutBounce: easeInOutBounce\n});\n\n/**\n * Simple numeric interpolator function\n */\nfunction number(fromValue, toValue, progress) {\n  return fromValue + (toValue - fromValue) * progress\n}\n\n/**\n * Interpolator for color values; decomposes the color into r/g/b channels and does\n * numeric interpolation on each individually. The result is a 24-bit integer value\n * holding the r/g/b channels in its 3 bytes.\n */\nfunction color(fromValue, toValue, progress) {\n  fromValue = colorValueToNumber(fromValue);\n  toValue = colorValueToNumber(toValue);\n  return rgbToNumber(\n    number(fromValue >> 16 & 255, toValue >> 16 & 255, progress),\n    number(fromValue >> 8 & 255, toValue >> 8 & 255, progress),\n    number(fromValue & 255, toValue & 255, progress)\n  )\n}\n\n\n\n/**\n * Utility for converting one of the supported color value types to a 24-bit numeric color\n * representation.\n * @param {*} value - The input value to translate. Supported types:\n * - 24-bit number: simply returned as is\n * - string value: evaluated using a canvas context, so supports color keywords, rgb(), hsl(), etc.\n * - a three.js `Color` object\n * @return {*}\n */\nconst colorValueToNumber = (function() {\n  let colorCanvas, colorCanvasCtx;\n\n  // Cache for evaluated string values\n  let stringCache = Object.create(null);\n  let stringCacheSize = 0;\n  const stringCacheMaxSize = 2048;\n\n  return function(value) {\n    if (typeof value === 'number') {\n      return value\n    }\n    else if (typeof value === 'string') {\n      if (value in stringCache) {\n        return stringCache[value]\n      }\n\n      // 2D canvas for evaluating string values\n      if (!colorCanvas) {\n        colorCanvas = document.createElement('canvas');\n        colorCanvasCtx = colorCanvas.getContext('2d');\n      }\n\n      colorCanvas.width = colorCanvas.height = 1;\n      colorCanvasCtx.fillStyle = value;\n      colorCanvasCtx.fillRect(0, 0, 1, 1);\n      const colorData = colorCanvasCtx.getImageData(0, 0, 1, 1).data;\n      const result = rgbToNumber(colorData[0], colorData[1], colorData[2]);\n\n      // Enforce max cache size - for now this invalidates the entire cache when reaching\n      // the max size; we could use a true LRU cache but hitting the max size should be rare\n      // in real world usage so this should suffice as a simple memory size protection.\n      if (stringCacheSize > stringCacheMaxSize) {\n        stringCache = Object.create(null);\n        stringCacheSize = 0;\n      }\n\n      // Put into cache\n      stringCache[value] = result;\n      stringCacheSize++;\n\n      return result\n    }\n    else if (value && value.isColor) {\n      return value.getHex()\n    }\n    else {\n      return 0 //fallback to black\n    }\n  }\n})();\n\nfunction rgbToNumber(r, g, b) {\n  return r << 16 ^ g << 8 ^ b\n}\n\nvar Interpolators = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  number: number,\n  color: color\n});\n\n/*eslint no-unused-vars: \"off\"*/\n\n/**\n * @interface AbstractTween\n * Defines the interface expected by `Runner` for tween-like things.\n */\nclass AbstractTween {\n  /**\n   * @abstract\n   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the\n   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be\n   * invoked.\n   * @param {number} time\n   */\n  gotoElapsedTime(time) {}\n\n  /**\n   * @abstract\n   * Like `gotoElapsedTime` but goes to the very end of the tween.\n   */\n  gotoEnd() {}\n\n  /**\n   * @abstract\n   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.\n   * @param {number} time\n   * @return {boolean}\n   */\n  isDoneAtElapsedTime(time) {}\n}\n\nconst linear$1 = v => v;\nconst maxSafeInteger = 0x1fffffffffffff;\n\n/**\n * @class Tween\n * Represents a transition between two values across a duration of time.\n *\n * Typically you will create a Tween between two values, with a callback function to handle the intermediate values,\n * and then start the Tween in a {@link Runner} which will start invoking the tween on each animation frame until\n * it reaches the end of its duration.\n *\n * @param callback {Function} a function that will be called with the current tween value at a given point in time.\n * @param fromValue {*} the beginning value\n * @param toValue {*} the ending value\n * @param duration {Number} the duration of the tween in milliseconds\n * @param [delay] {Number} optional time in milliseconds to wait before starting the tween\n * @param [easing] {Function|String} optional easing to be applied to the tween values. Can either be a function\n *        that takes a value from 0 to 1 and returns a corresponding \"eased\" value, or a string that matches the\n *        name of one of the common Penner easing functions - see http://easings.net/ Defaults to linear easing.\n * @param [iterations] {Number} optional number of times to repeat the tween animation. For endless repeating,\n *        specify `Infinity`.\n * @param [direction] {String} direction to run the tween; one of 'forward', 'reverse', or 'alternate'. For\n *        'alternate', it will toggle between forward and reverse on each iteration.\n * @param [interpolate] {String|Function} how tweened values should be calculated between the fromValue and toValue.\n *        Can be the string name for one of the built-in interpolators in Interpolators.js, or a custom function that\n *        will be passed 3 arguments: `fromValue`, `toValue`, and `progress` from 0 to 1.\n */\nclass Tween extends AbstractTween {\n  constructor(callback, fromValue, toValue, duration=750, delay=0, easing=linear$1, iterations=1, direction='forward', interpolate='number') {\n    super();\n    this.callback = callback;\n    this.fromValue = fromValue;\n    this.toValue = toValue;\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = typeof easing === 'string' ? (Easings[easing] || linear$1) : easing;\n    this.iterations = iterations;\n    this.direction = direction;\n    this.interpolate = typeof interpolate === 'function' ? interpolate : Interpolators[interpolate] || number;\n\n    /**\n     * @property totalElapsed\n     * @type {number}\n     * The total duration of this tween from 0 to its completion, taking into account its `duration`, `delay`, and\n     * `iterations`. This is calculated once upon instantiation, and may be used to determine whether the tween is\n     * finished or not at a given time.\n     */\n    this.totalElapsed = this.iterations < maxSafeInteger ? this.delay + (this.duration * this.iterations) : maxSafeInteger;\n  }\n\n  /**\n   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the\n   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be\n   * invoked.\n   * @param {number} time\n   */\n  gotoElapsedTime(time) {\n    let duration = this.duration;\n    let delay = this.delay;\n    if (time >= delay) {\n      time = Math.min(time, this.totalElapsed) - delay; //never go past final value\n      let progress = (time % duration) / duration;\n      if (progress === 0 && time !== 0) progress = 1;\n      progress = this.easing(progress);\n      if (this.direction === 'reverse' || (this.direction === 'alternate' && Math.ceil(time / duration) % 2 === 0)) {\n        progress = 1 - progress;\n      }\n      this.callback(this.interpolate(this.fromValue, this.toValue, progress));\n    }\n  }\n\n  /**\n   * Like `gotoElapsedTime` but goes to the very end of the tween.\n   */\n  gotoEnd() {\n    this.gotoElapsedTime(this.totalElapsed);\n  }\n\n  /**\n   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.\n   * @param {number} time\n   * @return {boolean}\n   */\n  isDoneAtElapsedTime(time) {\n    return time > this.totalElapsed\n  }\n}\n\n/**\n * A specialized Tween that controls one or more other tweens. The controlled tweens are treated as a\n * single unit and the easing/iterations/etc. are applied across the total duration of all tweens.\n */\nclass MultiTween extends Tween {\n  constructor(tweens, duration, delay, easing, iterations, direction) {\n    if (typeof duration !== 'number') {\n      // Calculate duration based on the longest individual total duration\n      duration = tweens.reduce((dur, tween) => Math.max(dur, tween.totalElapsed), 0);\n    }\n    if (duration === Infinity) {\n      // Make an infinite duration finite, so easing math still works\n      duration = Number.MAX_VALUE;\n    }\n\n    // Tween the total duration time\n    super(null, 0, duration, duration, delay, easing, iterations, direction);\n    if (tweens.length === 1) {\n      this.callback = tweens[0].gotoElapsedTime.bind(tweens[0]);\n    } else {\n      tweens.sort(endTimeComparator); //sort by end time to ensure proper iteration in syncTweens\n      this.callback = this._syncTweens;\n    }\n    this.tweens = tweens;\n  }\n\n  _syncTweens(time) {\n    // NOTE: forward iteration is important here so the tweens are evaluated in order\n    // of when they end; that way later tweens will take precedence over earlier ones.\n    // TODO would be nice to ignore tweens past their totalElapsed entirely, but have to\n    // figure out how to do that while ensuring they don't get stuck with a value that is\n    // slightly prior to their end state.\n    for (let i = 0, len = this.tweens.length; i < len; i++) {\n      this.tweens[i].gotoElapsedTime(time);\n    }\n  }\n}\n\nfunction endTimeComparator(a, b) {\n  return a.totalElapsed - b.totalElapsed\n}\n\nlet runners = [];\nlet nextFrameTimer = null;\nlet hasStoppedRunners = false;\n\nfunction noop() {}\n\nfunction isRunnerRunning(runner) {return runner.runner$running}\nfunction isTweenNotStopped(tween) {return !tween.runner$stopped}\n\nfunction tick() {\n  let now = Date.now();\n  nextFrameTimer = null;\n\n  // Filter out any runners that were stopped since last tick\n  if (hasStoppedRunners) {\n    runners = runners.filter(isRunnerRunning);\n    hasStoppedRunners = false;\n  }\n\n  if (runners.length) {\n    // Sync each runner, filtering out empty ones as we go\n    for (let i = runners.length; i-- > 0;) {\n      runners[i]._tick(now);\n    }\n    // Queue next tick if there are still active runners\n    queueFrame();\n  }\n}\n\nlet _scheduler = window;\n\n/**\n * Allow the scheduler to be modified, e.g. when switching to an immersive XRSession.\n *\n * TODO: we may want to only do this for a subset of animations, like just those subject to\n *  an XRSession, while letting others use the default. This global hook won't work for that.\n *\n * @param {{requestAnimationFrame, cancelAnimationFrame}} scheduler - an object holding\n *        the two scheduling functions.\n */\nfunction setAnimationScheduler(scheduler) {\n  scheduler = scheduler || window;\n  if (scheduler !== _scheduler) {\n    if (nextFrameTimer) {\n      _scheduler.cancelAnimationFrame(nextFrameTimer);\n      nextFrameTimer = null;\n    }\n    _scheduler = scheduler;\n    queueFrame();\n  }\n}\n\nfunction queueFrame() {\n  if (!nextFrameTimer) {\n    nextFrameTimer = _scheduler.requestAnimationFrame(tick);\n  }\n}\n\n\nfunction startRunner(runner) {\n  if (!runner.runner$running) {\n    runner.runner$running = true;\n    runners.push(runner);\n    queueFrame();\n  }\n}\n\nfunction stopRunner(runner) {\n  runner.runner$running = false;\n  hasStoppedRunners = true;\n}\n\n\n/**\n * @class Runner\n * A container for {@link Tween} instances that handles invoking them on each animation frame.\n */\nclass Runner {\n  constructor() {\n    this.tweens = [];\n  }\n\n  destructor() {\n    this.tweens = null;\n    stopRunner(this);\n    this.start = this.stop = this.pause = this._tick = noop;\n  }\n\n  /**\n   * Add a tween to the runner. It will be invoked on the next frame, not immediately.\n   * @param {Tween} tween\n   */\n  start(tween) {\n    // If previously paused, update start time to account for the duration of the pause\n    if (tween.runner$paused && tween.runner$started) {\n      tween.runner$started += (Date.now() - tween.runner$paused);\n    } else {\n      this.tweens.push(tween);\n    }\n    tween.runner$paused = null;\n    tween.runner$stopped = false;\n\n    // add runner to running runners\n    startRunner(this);\n  }\n\n  /**\n   * Remove a tween from the runner.\n   * @param tween\n   */\n  stop(tween) {\n    // queue tween for removal from list on next tick\n    tween.runner$stopped = true;\n    tween.runner$paused = null;\n  }\n\n  /**\n   * Pause a tween; call `runner.start(tween)` to unpause it\n   * @param tween\n   */\n  pause(tween) {\n    if (!tween.runner$paused) {\n      tween.runner$paused = Date.now();\n    }\n  }\n\n  /**\n   * Stop all running tweens.\n   */\n  stopAll() {\n    if (this.tweens) {\n      this.tweens.forEach(this.stop, this);\n    }\n  }\n\n  _tick(now) {\n    let tweens = this.tweens;\n    let hasStoppedTweens = false;\n    let hasRunningTweens = false;\n\n    // Sync each tween, filtering out old finished ones as we go\n    for (let i = 0, len = tweens.length; i < len; i++) {\n      let tween = tweens[i];\n      if (!tween.runner$stopped && !tween.runner$paused) {\n        // Sync the tween to current time\n        let elapsed = now - (tween.runner$started || (tween.runner$started = now));\n        tween.gotoElapsedTime(elapsed);\n        hasRunningTweens = true;\n\n        // Queue for removal if we're past its end time\n        if (tween.isDoneAtElapsedTime(elapsed)) {\n          this.stop(tween);\n          if (tween.onDone) {\n            tween.onDone();\n          }\n        }\n      }\n      if (tween.runner$stopped) {\n        hasStoppedTweens = true;\n      }\n    }\n\n    if (hasRunningTweens) {\n      this.onTick();\n    }\n\n    // Prune list if needed\n    // TODO perhaps batch this up so it happens less often\n    if (hasStoppedTweens) {\n      this.tweens = tweens.filter(isTweenNotStopped);\n\n      // remove runner from running runners if it has no tweens left\n      if (!this.tweens.length) {\n        stopRunner(this);\n        if (this.onDone) {\n          this.onDone();\n        }\n      }\n    }\n  }\n\n  /**\n   * Override to specify a function that will be called at the end of every frame, after all\n   * tweens have been updated.\n   */\n  onTick() {\n    // abstract\n  }\n\n  /**\n   * Override to specify a function that will be called after all running tweens have completed.\n   */\n  onDone() {\n    // abstract\n  }\n}\n\n/**\n * Preset spring physics configurations.\n * For convenience, these match the presets defined by react-spring: https://www.react-spring.io/docs/hooks/api\n */\nvar PRESETS = {\n  default: { mass: 1, tension: 170, friction: 26 },\n  gentle: { mass: 1, tension: 120, friction: 14 },\n  wobbly: { mass: 1, tension: 180, friction: 12 },\n  stiff: { mass: 1, tension: 210, friction: 20 },\n  slow: { mass: 1, tension: 280, friction: 60 },\n  molasses: { mass: 1, tension: 280, friction: 120 }\n};\n\n// Factors to be applied to the tension and friction values; these match those used by\n// react-spring internally, so that users can use the same spring configs as they would\n// in react-spring.\nconst tensionFactor = 0.000001;\nconst frictionFactor = 0.001;\n\nconst DEFAULTS = PRESETS.default;\n\n/**\n * @class SpringTween\n * Represents a transition between two values based on spring physics.\n *\n * This is very similar to `Tween`, except that it does not have a fixed duration. Instead, it advances a simple\n * spring physics simulation on each call to `gotoElapsedTime`. Since it depends on being advanced in forward-time\n * order, it cannot be repeated or run in a reverse direction. It is also not usable as a member of a `MultiTween`.\n *\n * The `toValue` property can be modified at any time while the simulation is running, and the velocity will be\n * maintained; this makes spring tweens more useful than duration-based tweens for objects whose target values are\n * changed rapidly over time, e.g. drag-drop.\n *\n * Non-numeric interpolations are not yet supported.\n *\n * @param callback {Function} a function that will be called with the current tween value at a given point in time.\n * @param {number} fromValue - the beginning value\n * @param {number} toValue - the initial ending value; this can be modified later by setting the `toValue` property\n * @param {string|object} springConfig - the physical configuration of the spring physics simulation. Either an object\n *        with `mass`, `tension`, and `friction` properties, or a string corresponding to one of the presets defined\n *        in `SpringPresets.js`. Defaults to the \"default\" preset.\n * @param {number} springConfig.mass - the mass of the simulated object being moved\n * @param {number} springConfig.tension - the spring's tension constant accelerating the simulated object\n * @param {number} springConfig.friction - the friction force decelerating the simulated object\n * @param {number} [initialVelocity] - velocity of the object at the start of the simulation\n * @param {number} [delay] optional time in milliseconds to wait before starting the simulation\n */\nclass SpringTween extends AbstractTween {\n  constructor (\n    callback,\n    fromValue,\n    toValue,\n    springConfig,\n    initialVelocity = 0,\n    delay = 0\n  ) {\n    super();\n    this.isSpring = true;\n    this.callback = callback;\n    this.currentValue = fromValue;\n    this.toValue = toValue;\n    this.velocity = initialVelocity;\n    this.delay = delay;\n\n    if (typeof springConfig === 'string') {\n      springConfig = PRESETS[springConfig];\n    }\n    if (!springConfig) springConfig = DEFAULTS;\n    const {mass, tension, friction} = springConfig;\n    this.mass = typeof mass === 'number' ? mass : DEFAULTS.mass;\n    this.tension = (typeof tension === 'number' ? tension : DEFAULTS.tension) * tensionFactor;\n    this.friction = (typeof friction === 'number' ? friction : DEFAULTS.friction) * frictionFactor;\n    this.minAcceleration = 1e-10; // in units/ms^2 - TODO make this configurable\n\n    this.$lastTime = delay;\n    this.$endTime = Infinity; //unknown until simulation is stepped to the end state\n  }\n\n  gotoElapsedTime (time) {\n    if (time >= this.delay) {\n      let { toValue, mass, tension, friction, minAcceleration } = this;\n      let velocity = this.velocity || 0;\n      let value = this.currentValue;\n\n      // Step simulation by 1ms\n      for (let t = this.$lastTime; t < time; t++) {\n        const acceleration = (tension * (toValue - value) - friction * velocity) / mass;\n        // Acceleration converges to zero near end state\n        if (Math.abs(acceleration) < minAcceleration) {\n          velocity = 0;\n          value = toValue;\n          this.$endTime = t;\n          break\n        } else {\n          velocity += acceleration;\n          value += velocity;\n        }\n      }\n      this.velocity = velocity;\n      this.$lastTime = time;\n      this.callback(this.currentValue = value);\n    }\n  }\n\n  gotoEnd () {\n    this.velocity = 0;\n    this.$lastTime = this.$endTime;\n    this.callback(this.currentValue = this.toValue);\n  }\n\n  isDoneAtElapsedTime (time) {\n    return time >= this.$endTime\n  }\n}\n\nexport { Easings, Interpolators, MultiTween, Runner, SpringTween, Tween, setAnimationScheduler };\n", "import { Runner, Tween, MultiTween, SpringTween } from 'troika-animation';\nimport React from 'react';\nimport T from 'prop-types';\n\n///// Miscellaneous Utility Functions /////\n\n\n/**\n * Pseudo-polyfilled shortcut for `Object.assign`. Copies own properties from\n * second-and-after arguments onto the first object, overwriting any that already\n * exist, and returns the first argument.\n * @return {object}\n */\nconst assign = Object.assign || _assign;\n\n// Non-native impl; exported for access by tests\nfunction _assign(/*target, ...sources*/) {\n  let target = arguments[0];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    let source = arguments[i];\n    if (source) {\n      for (let prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n  return target\n}\n\n\n/**\n * Like {@link assign}, but will ony copy properties that do _not_ already\n * exist on the target object.\n * @return {object}\n */\nfunction assignIf(/*target, ...sources*/) {\n  let target = arguments[0];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    let source = arguments[i];\n    if (source) {\n      for (let prop in source) {\n        if (source.hasOwnProperty(prop) && !target.hasOwnProperty(prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n  return target\n}\n\n/**\n * Like {@link assign}, but for any property where the source and target are both\n * sub-objects, does a deep recursive copy.\n * @param {object} target\n * @param {object} source\n */\nfunction assignDeep(target, source) {\n  if (source) {\n    for (let prop in source) {\n      if (source.hasOwnProperty(prop)) {\n        if (target[prop] && typeof target[prop] === 'object' && typeof source[prop] === 'object') {\n          assignDeep(target[prop], source[prop]);\n        } else {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * Iterate over an object's own (non-prototype-inherited) properties\n * @param {object} object - The object to iterate over\n * @param {function} fn - A function that will be invoked for each iterated property. It\n *        will be passed three arguments:\n *        - value (the property value)\n *        - key (the property name)\n *        - object (the object being iterated over)\n * @param {*} [scope] - An optional object to be used as `this` when calling the `fn`\n */\nfunction forOwn(object, fn, scope) {\n  for (let prop in object) {\n    if (object.hasOwnProperty(prop)) {\n      fn.call(scope, object[prop], prop, object);\n    }\n  }\n}\n\n\n/**\n * Given an object instance, return a consistent unique id for it.\n * @type function\n * @param {Object} obj - The object instance\n * @return {string} id\n */\nconst getIdForObject = (() => {\n  let objIds = new WeakMap();\n  let lastId = 0;\n  return function getIdForObject(obj) {\n    let id = objIds.get(obj);\n    if (!id) {\n      objIds.set(obj, (id = `$id${++lastId}`));\n    }\n    return id\n  }\n})();\n\n\n/**\n * Create a function that memoizes the result of another function based on the most\n * recent call's arguments and `this`. The arguments are compared using strict shallow equality.\n * @param {function} fn\n * @return {function}\n */\nfunction memoize(fn) {\n  let prevArgs, prevThis, prevResult;\n  return function() {\n    let changed = !prevArgs || this !== prevThis || arguments.length !== prevArgs.length;\n    if (!changed) {\n      for (let i = 0, len = arguments.length; i < len; i++) {\n        if (arguments[i] !== prevArgs[i]) {\n          changed = true;\n          break\n        }\n      }\n    }\n    if (changed) {\n      prevArgs = Array.prototype.slice.call(arguments);\n      prevThis = this;\n      prevResult = fn.apply(this, arguments);\n    }\n    return prevResult\n  }\n}\n\n\n/**\n * Utility for the \"extend-as\" pattern used in several places to decorate facade\n * classes with extra capabilities.\n * @param {string} name - unique identifier for this class extension\n * @param {function} doExtend - the function that creates the actual class extension,\n *        this is passed the base class and will only be called once per base class.\n * @return {function(class): class}\n */\nfunction createClassExtender(name, doExtend) {\n  const cache = new WeakMap();\n  return function(classToExtend) {\n    let extended = cache.get(classToExtend);\n    if (!extended) { //bidir check due to inheritance of statics\n      extended = doExtend(classToExtend);\n      cache.set(classToExtend, extended);\n    }\n    return extended\n  }\n}\n\n\n/**\n * Determine whether a given object is a React element descriptor object, i.e. the\n * result of a JSX transpilation to React.createElement().\n * @param obj\n * @return {boolean}\n */\nfunction isReactElement(obj) {\n  const t = obj.$$typeof;\n  return (t && t.toString && t.toString() === 'Symbol(react.element)') || false\n}\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  assign: assign,\n  _assign: _assign,\n  assignIf: assignIf,\n  assignDeep: assignDeep,\n  forOwn: forOwn,\n  getIdForObject: getIdForObject,\n  memoize: memoize,\n  createClassExtender: createClassExtender,\n  isReactElement: isReactElement\n});\n\n/**\n * The base class for all Facade classes.\n *\n * A Facade is basically just a class that receives property assignments from a scene descriptor\n * and manages forwarding the resulting state to more complex underlying implementation\n * objects, e.g. ThreeJS objects.\n *\n * The instantiated facade objects have a very simple lifecycle:\n *   - The `constructor` in which the initial state and the underyling implementation object(s)\n *     can be initialized. It will be passed a single argument: the `parent` facade object.\n *   - Updates to the object's properties, usually by direct assignment from the scene descriptor.\n *     These updates can be handled immediately by defining property setters that handle syncing\n *     new values to the underyling implementation object(s).\n *   - The `afterUpdate()` method which signals the end of all property updates; this can be\n *     implemented to handle syncing the full set of updated properties to the underlying\n *     implementation object(s). Useful if an aspect of the syncing relies on multiple properties\n *     or needs things to be synced in a specific order.\n *   - The `destructor` method which is always called when the object is removed from the scene.\n *     Implement this to remove and clean up the underlying implementation object(s) and other\n *     cleanup logic.\n *\n * Scene Descriptors:\n *\n * All facade instances are created, updated, and destroyed based on the current structure of\n * a scene descriptor object. The properties in the descriptor are generally just copied\n * directly to properties of the same names on the facade instance, which can handle them\n * either by custom setters or in `afterUpdate`. There are a few special properties in the\n * descriptor:\n *\n *   - `facade`: (required) a reference to the Facade class that will be instantiated.\n *   - `key`: (recommended) an identifier that is unique amongst the descriptor's siblings, which\n *     is used to associate the descriptor with its corresponding Facade instance. One will be\n *     assigned automatically if omitted, but it's recommended that you set one manually to ensure\n *     descriptors are predictably resolved to the same facade instances when siblings are being\n *     added or removed. Not doing so can lead to unnecessary facade destruction/creation and/or\n *     unpredictable facade states.\n *   - `children`: (optional) for `Parent` facade subclasses, defines the child object descriptors.\n *   - `ref`: (optional) a function that will be called with a reference to the instantiated Facade\n *     on creation, and with `null` on destruction, allowing external code to maintain references\n *     to individual facades.\n *   - `transition`: (optional) defines a set of properties that should be transitioned smoothly\n *     when their value changes. See `Animatable` for more details.\n *   - `animation`: (optional) defines one or more keyframe animations. See `Animatable` for more\n *     details.\n *   - `exitAnimation`: (optional) defines a keyframe animation to run when the facade is removed\n *     from its parent.\n *   - `pointerStates`: (optional) defines sets of property values that should be used in place\n *     of those defined on the main object, when the user's pointer (mouse, touch, vr controller,\n *     etc.) is in `hover` or `active` interaction state with the facade. See `PointerStates`\n *     for more details.\n *\n * It is also possible to define facade descriptors using JSX (https://reactjs.org/docs/introducing-jsx.html),\n * if it is precompiled to `React.createElement` calls. In this case, use the facade class as the JSX\n * element name instead of a `facade` property, and child descriptors are defined as nested JSX elements i\n * nstead of a `children` property. *NOTE:* While this is often a nicer looking syntax than the plain JS object\n * form, be aware that the creation of JSX elements does carry a slight performance cost from extra logic\n * and object allocations, so you should avoid it when defining large numbers of facades or when updating\n * descriptors on every frame.\n */\nclass Facade {\n  constructor(parent) {\n    this.$facadeId = `facade${ idCounter++ }`;\n    this.parent = parent;\n  }\n\n  /**\n   * Performs a manual update of this facade, invoking the afterUpdate lifecycle method and triggering a\n   * render. This can be called in event handlers, for example, to affect changes to this facade and its\n   * subtree. This process is synchronous. Never override this method as a way to react to updates, as it\n   * is not the only way a component is updated; instead override `afterUpdate` or use setters.\n   * @param {object} [props] - A set of properties to be copied to the facade\n   */\n  update(props) {\n    if (props && typeof props === 'object') {\n      // Always assign transition and animation first\n      this.transition = props.transition;\n      this.animation = props.animation;\n      for (let prop in props) {\n        if (props.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {\n          this[prop] = props[prop];\n        }\n      }\n    }\n    this.afterUpdate();\n    this.requestRender();\n  }\n\n  /**\n   * Called at the end of an update batch, after all individual properties have been assigned.\n   */\n  afterUpdate() {\n    // Handle calling ref function\n    let ref = this.ref;\n    if (ref !== this._lastRef) {\n      if (typeof this._lastRef === 'function') {\n        this._lastRef.call(null, null);\n      }\n      if (typeof ref === 'function') {\n        ref.call(null, this);\n        this._lastRef = ref;\n      } else {\n        this._lastRef = null;\n      }\n    }\n  }\n\n  /**\n   * Dispatch a message with optional data up the facade parent tree.\n   */\n  notifyWorld(message, data) {\n    if (this.parent) {\n      this.parent.onNotifyWorld(this, message, data);\n    }\n  }\n\n  /**\n   * Default onNotifyWorld handler just bubbles it up the parent chain.\n   */\n  onNotifyWorld(source, message, data) {\n    let notifiableParent = this._notifiableParent;\n    if (notifiableParent) {\n      notifiableParent.onNotifyWorld.call(notifiableParent, source, message, data);\n    } else {\n      // Optimization: on first call, walk up the tree looking for the first ancestor with a\n      // non-default onNotifyWorld implementation, and save a pointer to that ancestor\n      // facade so we can just call it directly the next time without any tree walking.\n      notifiableParent = this.parent;\n      let defaultImpl = Facade.prototype.onNotifyWorld;\n      while (notifiableParent) {\n        if (notifiableParent.onNotifyWorld !== defaultImpl) {\n          this._notifiableParent = notifiableParent;\n          notifiableParent.onNotifyWorld(source, message, data);\n          break\n        }\n        notifiableParent = notifiableParent.parent;\n      }\n    }\n  }\n\n  /**\n   * Notifies the top-level world manager that this object has changed in some way that affects its\n   * visible rendering, so a rendering frame will be scheduled.\n   */\n  requestRender() {\n    this.notifyWorld('needsRender');\n  }\n\n  traverse(fn) {\n    fn(this);\n  }\n\n  forEachChild(fn) {\n  }\n\n  /**\n   * Add an event listener for the given event type.\n   * @param {String} type\n   * @param {Function} handler\n   */\n  addEventListener(type, handler) {\n    this.notifyWorld('addEventListener', {type, handler});\n  }\n\n  /**\n   * Remove an event listener for the given event type.\n   * @param {String} type\n   * @param {Function} handler\n   */\n  removeEventListener(type, handler) {\n    this.notifyWorld('removeEventListener', {type, handler});\n  }\n\n  /**\n   * Dispatch an Event object on this facade, with DOM events bubbling logic.\n   * @param {Event} event\n   */\n  dispatchEvent(event) {\n    this.notifyWorld('dispatchEvent', event);\n  }\n\n  /**\n   * Called when the instance is being removed from the scene. Override this to implement any\n   * custom cleanup logic.\n   */\n  destructor() {\n    // Unregister all event listeners from the world\n    if (this.parent) {\n      this.notifyWorld('removeAllEventListeners');\n    }\n\n    // Teardown refs\n    if (typeof this.ref === 'function') {\n      this.ref.call(null, null);\n    }\n    this.parent = this._notifiableParent = null;\n  }\n}\n\nassign(Facade.prototype, {\n  ref: null,\n  _lastRef: null,\n  _notifiableParent: null\n});\n\n\nlet idCounter = 0;\nconst DEF_SPECIAL_PROPS = {key:1, facade:1, transition:1, animation:1};\n\n/**\n * @static\n * Determine if a certain property name is one of the special descriptor properties\n */\nFacade.isSpecialDescriptorProperty = function(name) {\n  return DEF_SPECIAL_PROPS.hasOwnProperty(name)\n};\n\n/**\n * @static\n * Define a property name as an event handler for a given Facade class, so that it\n * automatically updates the global event registry when set.\n * @param {class} facadeClass - the class whose prototype the property should be defined on\n * @param {String} propName - the name of the event handler property, e.g. 'onMouseOver'\n * @param {String} eventType - the type of the event that will trigger the handler, e.g. 'mouseover'\n */\nFacade.defineEventProperty = function(facadeClass, propName, eventType) {\n  let privateProp = `${propName}➤handler`;\n  Object.defineProperty(facadeClass.prototype, propName, {\n    get() {\n      return this[privateProp]\n    },\n    set(handler) {\n      const oldHandler = this[privateProp];\n      if ((handler || null) !== (oldHandler || null)) {\n        // Remove old listener\n        if (typeof oldHandler === 'function') {\n          this.removeEventListener(eventType, oldHandler);\n        }\n        // Add new listener\n        if (typeof handler === 'function') {\n          this.addEventListener(eventType, handler);\n        }\n        this[privateProp] = handler;\n      }\n    }\n  });\n};\n\nconst DEFAULT_DURATION = 750;\nconst DEFAULT_EASING = 'easeOutCubic';\n\nconst TEMP_ARRAY = [null];\n\nfunction animationIdJsonReplacer(key, value) {\n  return key === 'paused' ? undefined : value === Infinity ? 'Infinity' : value\n}\n\nfunction compareByTime(a, b) {\n  return a.time - b.time\n}\n\nconst extendAsAnimatable = createClassExtender('animatable', function(BaseFacadeClass) {\n  class AnimatableFacade extends BaseFacadeClass {\n\n    constructor(...args) {\n      super(...args);\n\n      // Create root runner for all this object's animation and transition tweens\n      this.animation$runner = new Runner();\n      this.animation$runner.onTick = () => {\n        this.afterUpdate();\n        this.requestRender();\n      };\n    }\n\n    /**\n     * Handle the special \"transition\" property. The descriptor should be an object with\n     * transitionable property names as keys and transition parameters as values. The\n     * transition parameters can either be objects describing the transition parameters,\n     * or `true` for a default transition.\n     *\n     *   transition: {\n     *     x: true, // uses a default duration-based transition\n     *     y: 'spring', //uses a default spring-based transition\n     *     z: {\n     *       // ...custom transition config\n     *     }\n     *   }\n     *\n     * The custom transition config object can take one of two forms for duration- vs.\n     * spring-based animations:\n     *\n     * Duration-based:\n     *\n     *   {\n     *     duration: n, //in ms, defaults to 750\n     *     easing: e, //easing function, defaults to 'easeOutCubic'\n     *     delay: n, //in ms, defaults to 0\n     *     interpolate: 'number' //one of the builtin named interpolators ('number', 'color', etc.) or a custom Function\n     *   }\n     *\n     * Spring-based:\n     *\n     *   {\n     *     spring: s, //either `true`, a named preset string e.g. \"wobbly\", or an object with {mass, tension, friction}\n     *     delay: n //in ms, defaults to 0\n     *   }\n     *\n     * Note that spring-based transitions do not currently support custom interpolations so they should only be used\n     * for numeric values.\n     */\n    set transition(descriptor) {\n      if (descriptor) {\n        // Ensure setter/getter has been created for all props in transition\n        for (let propName in descriptor) {\n          if (descriptor.hasOwnProperty(propName)) {\n            defineTransitionPropInterceptor(propName, this);\n          }\n        }\n      }\n      this.transition$descriptor = descriptor;\n    }\n    get transition() {\n      return this.transition$descriptor\n    }\n\n\n    /**\n     * Handle the special \"animation\" property. The descriptor should be an object or array\n     * of objects defining a set of keyframes and their playback parameters. Keyframes are\n     * defined by numeric keys from 0 to 100, each defining an object with the target\n     * property values for that keyframe.\n     *\n     *   animation: [{\n     *     0: {rotateZ: 0, color: 0x000000}, //can also use key \"from\"\n     *     100: {rotateZ: Math.PI * 2, color: 0xffffff}, //can also use key \"to\"\n     *     delay: 0, //starting delay in ms\n     *     duration: 2000, //total anim duration in ms, defaults to 750\n     *     easing: 'linear', //easing for the whole animation, defaults to 'linear'\n     *     iterations: 5, //number of times to loop the animation, defaults to 1. Set to Infinity for endless loop.\n     *     direction: 'forward', //either 'forward', 'backward', or 'alternate'\n     *     interpolate: {color: 'color'}, //mapping of property names to Interpolators.js names or custom functions\n     *     paused: false //if true the animation will be paused at its current position until set back to false\n     *   }, ...]\n     *\n     * Internally the animations will be built into a set of nested tweens:\n     *\n     * |--------------------------- Main MultiTween ------------------------------------|\n     *\n     * |------------- Anim 1 MultiTween w/ easing+repeat ----------------|\n     * |--- prop1 tween 1 ---|--- prop1 tween 2 ---|--- prop1 tween 3 ---|\n     * |--------- prop2 tween 1 --------|--------- prop2 tween 2 --------|\n     *\n     *                    delay -->|-------- Anim 2 MultiTween w/ easing+repeat --------|\n     *                             |----- prop3 tween 1 -----|----- prop3 tween 2 ------|\n     *                             |------------------- prop4 tween --------------------|\n     *                                            |----------- prop5 tween -------------|\n     */\n    set animation(descriptor) {\n      if (this.animation$descriptor === descriptor) return\n      this.animation$descriptor = descriptor;\n      let oldAnimTweens = this.animation$tweens || null;\n      let newAnimTweens = this.animation$tweens = descriptor ? Object.create(null) : null;\n      let runner = this.animation$runner;\n      let hasChanged = false;\n\n      // Handle single object not wrapped in array\n      if (descriptor && !Array.isArray(descriptor)) {\n        TEMP_ARRAY[0] = descriptor;\n        descriptor = TEMP_ARRAY;\n      }\n\n      if (descriptor) {\n        for (let i = 0, len = descriptor.length; i < len; i++) {\n          let animDesc = descriptor[i];\n          if (!animDesc) continue\n\n          // Calculate an identifier for this animation based on properties whose modification requires a new tween\n          let animId = JSON.stringify(animDesc, animationIdJsonReplacer);\n          //console.log(`${animId} - is ${oldAnimTweens && oldAnimTweens[animId] ? '' : 'not'} in old tweens`)\n\n          // If a matching tween already exists, update it\n          if (oldAnimTweens && (animId in oldAnimTweens)) {\n            let tween = oldAnimTweens[animId];\n            if (animDesc.paused) {\n              runner.pause(tween);\n            } else {\n              runner.start(tween);\n            }\n            newAnimTweens[animId] = tween;\n          }\n          // Otherwise create a new tween\n          else {\n            let delay = 0;\n            let duration = DEFAULT_DURATION;\n            let easing = 'linear';\n            let iterations = 1;\n            let keyframes = [];\n            let direction = 'forward';\n\n            for (let key in animDesc) {\n              if (animDesc.hasOwnProperty(key)) {\n                switch(key) {\n                  case 'duration':\n                    duration = animDesc[key]; break\n                  case 'delay':\n                    delay = animDesc[key]; break\n                  case 'easing':\n                    easing = animDesc[key]; break\n                  case 'iterations':\n                    iterations = animDesc[key]; break\n                  case 'direction':\n                    direction = animDesc[key]; break\n                  default: {\n                    let percent = key === 'from' ? 0 : key === 'to' ? 100 : parseFloat(key);\n                    if (!isNaN(percent) && percent >= 0 && percent <= 100) {\n                      keyframes.push({time: percent / 100, props: animDesc[key]});\n                      for (let animProp in animDesc[key]) {\n                        if (animDesc[key].hasOwnProperty(animProp)) {\n                          // Ensure setter is in place\n                          defineTransitionPropInterceptor(animProp, this);\n                          // Stop any active transition tweens for this property\n                          let tweenKey = animProp + '➤anim:tween';\n                          if (this[tweenKey]) {\n                            runner.stop(this[tweenKey]);\n                            this[tweenKey] = null;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if (keyframes.length) {\n              // Sort the keyframes by time\n              keyframes.sort(compareByTime);\n              if (keyframes[0].time > 0) {\n                keyframes.unshift(assignIf({time: 0}, keyframes[0]));\n              }\n\n              // Build a MultiTween with tweens for each keyframe+property\n              let keyframePropTweens = [];\n              for (let j = 1, len = keyframes.length; j < len; j++) {\n                let keyframe = keyframes[j];\n                let props = keyframe.props;\n                for (let prop in props) {\n                  if (props.hasOwnProperty(prop)) {\n                    let prevKeyframe = null;\n                    for (let k = j; k--;) {\n                      if (prop in keyframes[k].props) {\n                        prevKeyframe = keyframes[k];\n                        break\n                      }\n                    }\n                    if (prevKeyframe) {\n                      let propTween = new Tween(\n                        this[prop + '➤anim:actuallySet'].bind(this), //callback\n                        prevKeyframe.props[prop], //fromValue\n                        props[prop], //toValue\n                        (keyframe.time - prevKeyframe.time) * duration, //duration\n                        prevKeyframe.time * duration, //delay\n                        'linear', //easing\n                        1, //iterations\n                        'forward', //direction\n                        animDesc.interpolate && animDesc.interpolate[prop] || 'number'\n                      );\n                      propTween.$$property = prop;\n                      keyframePropTweens.push(propTween);\n                    }\n                  }\n                }\n              }\n              let tween = newAnimTweens[animId] = new MultiTween(keyframePropTweens, duration, delay, easing, iterations, direction);\n              if (!animDesc.paused) {\n                runner.start(tween);\n              }\n\n              // The tween runner won't do anything until next tick, so immediately sync to the first frame's\n              // properties if the animation has no delay to avoid a flash of bad initial state\n              if (delay === 0) {\n                let firstKeyframeProps = keyframes[0].props;\n                for (let prop in firstKeyframeProps) {\n                  if (firstKeyframeProps.hasOwnProperty(prop)) {\n                    this[prop + '➤anim:actuallySet'](firstKeyframeProps[prop]);\n                  }\n                }\n              }\n            }\n\n            hasChanged = true;\n          }\n        }\n      }\n\n      // Stop any obsolete tweens\n      if (oldAnimTweens) {\n        for (let animId in oldAnimTweens) {\n          if (!newAnimTweens || !newAnimTweens[animId]) {\n            let tween = oldAnimTweens[animId];\n            tween.gotoEnd(); //force to end value so it doesn't stick partway through\n            runner.stop(tween);\n            hasChanged = true;\n          }\n        }\n      }\n\n      // If the total set of animations has changed, recalc the set of animating properties\n      if (hasChanged) {\n        if (newAnimTweens) {\n          let animatingProps = this.animation$animatingProps = Object.create(null);\n          for (let animId in newAnimTweens) {\n            let propTweens = newAnimTweens[animId].tweens;\n            for (let i = propTweens.length; i--;) {\n              animatingProps[propTweens[i].$$property] = true;\n            }\n          }\n        } else {\n          this.animation$animatingProps = null;\n        }\n      }\n    }\n    get animation() {\n      return this.animation$descriptor\n    }\n\n    destructor() {\n      const runner = this.animation$runner;\n      if (this.exitAnimation && !this.parent.isDestroying) {\n        runner.stopAll();\n        this.animation = this.exitAnimation;\n        this.exitAnimation = this.transition = null;\n        const onTick = runner.onTick;\n        runner.onTick = () => {\n          if (this.parent && !this.parent.isDestroying) {\n            onTick();\n          } else {\n            // An ancestor may have been destroyed during our exit animation, orphaning this object;\n            // catch this case and short-circuit the animation to prevent errors in subsequent ticks\n            runner.onDone = null;\n            this.destructor();\n          }\n        };\n        runner.onDone = () => {\n          this.requestRender();\n          this.destructor();\n        };\n      } else {\n        runner.destructor();\n        super.destructor();\n      }\n    }\n  }\n\n  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it\n  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with\n  // other custom setters anywhere else in the prototype chain.\n  function defineTransitionPropInterceptor(propName, currentInstance) {\n    if (!AnimatableFacade.prototype.hasOwnProperty(propName)) {\n      let actualValueKey = `${ propName }➤anim:actualValue`;\n      let actuallySetKey = `${ propName }➤anim:actuallySet`;\n      let hasBeenSetKey = `${ propName }➤anim:hasBeenSet`;\n      let activeTweenKey = `${ propName }➤anim:tween`;\n\n      // Find the nearest getter/setter up the prototype chain, if one exists. Assuming the prototype won't change after the fact.\n      let superGetter, superSetter;\n      let proto = BaseFacadeClass.prototype;\n      while (proto) {\n        let desc = Object.getOwnPropertyDescriptor(proto, propName);\n        if (desc) {\n          superSetter = desc.set;\n          superGetter = desc.get;\n          if (superSetter && !superGetter || superGetter && !superSetter) {\n            throw new Error(`Animatable: property ${propName} has a custom ${superSetter ? 'setter' : 'getter'} but no ${superSetter ? 'getter' : 'setter'}. Animatable properties must have both.`)\n          }\n          break\n        }\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      // Function to set the value, bypassing the interceptor setter.\n      // Use the super setter if available, otherwise store in a private-ish key\n      let actuallySet = superSetter ? function actuallySet(value) {\n        superSetter.call(this, value);\n        if (!this[hasBeenSetKey]) {\n          this[hasBeenSetKey] = true;\n        }\n      } : function actuallySet(value) {\n        this[actualValueKey] = value;\n        if (!this[hasBeenSetKey]) {\n          this[hasBeenSetKey] = true;\n        }\n      };\n      Object.defineProperty(AnimatableFacade.prototype, actuallySetKey, { value: actuallySet });\n\n\n      // Add the custom getter/setter for this property\n      Object.defineProperty(AnimatableFacade.prototype, propName, {\n        get() {\n          // Always return the current actual value\n          return superGetter ? superGetter.call(this) : this[hasBeenSetKey] ? this[actualValueKey] : BaseFacadeClass.prototype[propName]\n        },\n\n        set(value) {\n          // Will this value be controlled by an animation? Ignore it since animations take precedence.\n          if (this.animation$animatingProps && this.animation$animatingProps[propName]) {\n            return\n          }\n\n          // Does this value have a transition defined, and are the old/new values transitionable?\n          let runner = this.animation$runner;\n          let transition = this.transition;\n          if (transition && transition[propName] && this[hasBeenSetKey] && transition.hasOwnProperty(propName)) {\n            transition = transition[propName];\n            let springConfig = transition === 'spring' ? 'default' : transition.spring;\n            // If there's no active transition tween, or the new value is different than the active tween's\n            // target value, initiate a new transition tween. Otherwise ignore it.\n            let tween = this[activeTweenKey];\n            let needsNewTween = false;\n            if (tween) {\n              // Active tween - start new one if new value is different than the old tween's target\n              // value, unless they're both springs in which case update the original\n              if (value !== tween.toValue) {\n                if (springConfig && tween.isSpring) {\n                  // TODO allow mid-simulation modification of spring config?\n                  tween.toValue = value;\n                } else {\n                  runner.stop(tween);\n                  needsNewTween = true;\n                }\n              }\n            } else if (value !== this[propName]) {\n              // No active tween - only start one if the value is changing\n              needsNewTween = true;\n            }\n            if (needsNewTween) {\n              tween = this[activeTweenKey] = springConfig\n                ? new SpringTween(\n                  actuallySet.bind(this), //callback\n                  this[propName], //fromValue\n                  value, //toValue\n                  springConfig, //springConfig (mass, friction, tension)\n                  0, //initialVelocity\n                  transition.delay || 0 //delay\n                )\n                : new Tween(\n                  actuallySet.bind(this), //callback\n                  this[propName], //fromValue\n                  value, //toValue\n                  transition.duration || DEFAULT_DURATION, //duration\n                  transition.delay || 0, //delay\n                  transition.easing || DEFAULT_EASING, //easing\n                  1, //iterations\n                  'forward', //direction\n                  transition.interpolate || 'number' //interpolate\n                );\n              tween.onDone = () => {\n                tween = this[activeTweenKey] = null;\n              };\n              runner.start(tween);\n            }\n            return\n          }\n\n          // No animation or transition will be started; set the value.\n          actuallySet.call(this, value);\n\n          // Clean up obsolete stuff\n          let tween = this[activeTweenKey];\n          if (tween) runner.stop(tween);\n          this[activeTweenKey] = null;\n        }\n      });\n    }\n\n\n    // If the instance had this property set before the intercepting setter was added to the\n    // prototype, that would continue to take precedence, so move its value to the private property.\n    if (currentInstance.hasOwnProperty(propName)) {\n      currentInstance[`${ propName }➤anim:actualValue`] = currentInstance[propName];\n      currentInstance[`${ propName }➤anim:hasBeenSet`] = true;\n      delete currentInstance[propName];\n    }\n\n  }\n\n  return AnimatableFacade\n});\n\n/**\n * Allows a facade to be configured with an optional `pointerStates` property, which defines\n * sets of property values that should be used in place of the object's actual values when\n * the user interacts with the facade using their pointer device (mouse, touch, vr controller, etc.)\n * This is not used directly, but is automatically wrapped by `ParentFacade` and `ListFacade` when\n * setting up their children if the `pointerStates` property is present.\n *\n * The `pointerStates` property should point to an object with `hover` and/or `active` properties,\n * each of which is an object holding the individual properties to be used in those states. Any\n * properties defined in `active` will take precedence over those defined in `hover`.\n *\n * The properties will honor any `transition`s defined for them, but the `transition` must be\n * defined on the facade's main configuration object, not within the pointerStates themselves.\n */\nconst extendAsPointerStatesAware = createClassExtender('pointerStates', function(BaseFacadeClass) {\n  const isHoveringProp = '➤pntr:isHovering';\n  const isActiveProp = '➤pntr:isActive';\n  const propsWithInterceptors = Object.create(null);\n\n  class PointerStatesAware extends BaseFacadeClass {\n    constructor(parent) {\n      super(parent);\n      this.addEventListener('mouseover', hoverOverHandler);\n      this.addEventListener('mouseout', hoverOutHandler);\n      this.addEventListener('mousedown', activeDownHandler);\n      this.addEventListener('mouseup', activeUpHandler);\n    }\n\n    afterUpdate() {\n      this._applyPointerStates();\n      super.afterUpdate();\n    }\n\n    _applyPointerStates() {\n      const pointerStates = this.pointerStates;\n      const hoverValuesToUse = (pointerStates && this[isHoveringProp] && pointerStates.hover) || null;\n      const activeValuesToUse = (pointerStates && this[isActiveProp] && pointerStates.active) || null;\n\n      const lastAppliedValues = this['➤pntr:lastAppliedValues'] || propsWithInterceptors;\n      const appliedValues = this['➤pntr:lastAppliedValues'] =\n        (hoverValuesToUse || activeValuesToUse) ? assign(Object.create(null), hoverValuesToUse, activeValuesToUse) : null;\n\n      if (appliedValues) {\n        for (let prop in appliedValues) {\n          definePropInterceptor(prop, this);\n          actuallySet(this, prop, appliedValues[prop]);\n        }\n      }\n\n      if (lastAppliedValues) {\n        for (let prop in lastAppliedValues) {\n          if (!appliedValues || !(prop in appliedValues)) {\n            actuallySet(this, prop, this[`${prop}➤pntr:baseValue`]);\n          }\n        }\n      }\n    }\n  }\n\n  // Flag for identification\n  Object.defineProperty(PointerStatesAware.prototype, 'isPointerStateAware', {value: true});\n\n  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it\n  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with\n  // other custom setters anywhere else in the prototype chain.\n  function definePropInterceptor(propName, currentInstance) {\n    // On first set for this instance, move the prop's previous value, if any, to the private property\n    const hasBeenSetProp = `${propName}➤pntr:hasBeenSet`;\n    if (!currentInstance[hasBeenSetProp]) {\n      currentInstance[`${ propName }➤pntr:baseValue`] = currentInstance[propName];\n      delete currentInstance[propName]; //remove own prop so it doesn't override the prototype getter/setter\n      currentInstance[hasBeenSetProp] = true;\n    }\n\n    if (!PointerStatesAware.prototype.hasOwnProperty(propName)) {\n      propsWithInterceptors[propName] = 1;\n      const baseValueProp = `${ propName }➤pntr:baseValue`;\n      const appliedValueProp = `${propName}➤pntr:appliedValue`;\n\n      Object.defineProperty(PointerStatesAware.prototype, propName, {\n        get() {\n          const superGetter = getSuperGetter(propName);\n          return superGetter ? superGetter.call(this) :\n            (appliedValueProp in this) ? this[appliedValueProp] :\n            this[baseValueProp]\n        },\n\n        set(value) {\n          this[baseValueProp] = value;\n        }\n      });\n    }\n  }\n\n  function actuallySet(instance, propName, value) {\n    const superSetter = getSuperSetter(propName);\n    if (superSetter) {\n      superSetter.call(instance, value);\n    } else {\n      instance[`${propName}➤pntr:appliedValue`] = value;\n    }\n  }\n\n  function getSuperGetter(propName) {\n    let proto = BaseFacadeClass.prototype;\n    if (propName in proto) { //prefilter across entire proto chain\n      while (proto) {\n        let desc = Object.getOwnPropertyDescriptor(proto, propName);\n        if (desc && desc.get) {\n          return desc.get\n        }\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n    return null\n  }\n\n  function getSuperSetter(propName) {\n    let proto = BaseFacadeClass.prototype;\n    if (propName in proto) { //prefilter across entire proto chain\n      while (proto) {\n        let desc = Object.getOwnPropertyDescriptor(proto, propName);\n        if (desc && desc.set) {\n          return desc.set\n        }\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n    return null\n  }\n\n  function hoverOverHandler(e) {\n    e.currentTarget[isHoveringProp] = true;\n    afterPointerStateChange(e);\n  }\n  function hoverOutHandler(e) {\n    e.currentTarget[isHoveringProp] = e.currentTarget[isActiveProp] = false;\n    afterPointerStateChange(e);\n  }\n  function activeDownHandler(e) {\n    e.currentTarget[isActiveProp] = true;\n    afterPointerStateChange(e);\n  }\n  function activeUpHandler(e) {\n    e.currentTarget[isActiveProp] = false;\n    afterPointerStateChange(e);\n  }\n\n  function afterPointerStateChange(e) {\n    let highestFacade = e.currentTarget;\n    let parent = highestFacade.parent;\n    while (parent && parent.shouldUpdateChildren()) {\n      if (parent.isPointerStateAware) {\n        highestFacade = parent;\n      }\n      parent = parent.parent;\n    }\n    highestFacade.afterUpdate();\n    highestFacade.requestRender();\n  }\n\n  return PointerStatesAware\n});\n\n/**\n * ListFacade is an optimized way to define a large number of scene objects based on an array of data.\n * Unlike mapping a data array to `children` objects in the scene descriptor, ListFacade allows you to\n * define only a single \"template\" descriptor object whose properties are either constant values\n * or accessor functions that get invoked for each data item. The resulting property values are\n * then applied directly to the implementation objects, without creating any intermediary objects.\n *\n * Example:\n *\n *     {\n *       key: 'balls',\n *       facade: ListFacade,\n *       data: itemsData,\n *       template: {\n *         key: (item, i, all) => `ball_${ item.id }`,\n *         facade: Ball,\n *         x: (item, i, all) => item.time,\n *         y: (item, i, all) => item.count,\n *         radius: 10,\n *         color: (item, i, all) => item.important ? 0xff0000 : 0xcccccc\n *       }\n *     }\n */\nclass List extends Facade {\n  constructor(parent) {\n    super(parent);\n    this._orderedItemKeys = [];\n  }\n\n  afterUpdate() {\n    let {data, template} = this;\n    let hasData = data && data.length && Array.isArray(data);\n\n    // Allow the `template` to be defined as a JSX element, i.e. the result of React.createElement()\n    // TODO almost works, except that React stringifies the `key` function\n    // if (isReactElement(template)) {\n    //   template.props.key = template.key\n    //   template.props.facade = template.type\n    //   template = template.props\n    // }\n\n    // Some basic validation in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      if (data && !Array.isArray(data)) {\n        throw new Error('ListFacade \"data\" must be an array.')\n      }\n      if (!template || typeof template !== 'object') {\n        throw new Error('ListFacade \"template\" must be an object.')\n      }\n      if (!template || typeof template.key !== 'function') {\n        throw new Error('ListFacade template must define a \"key\" function.')\n      }\n      if (!template || typeof template.facade !== 'function') {\n        throw new Error('ListFacade template must define a \"facade\".')\n      }\n    }\n\n    if (this.shouldUpdateChildren()) {\n      let oldDict = this._itemsDict || null;\n      let newDict = this._itemsDict = hasData ? Object.create(null) : null;\n      let orderedItemKeys = this._orderedItemKeys;\n\n      if (hasData) {\n        orderedItemKeys.length = data.length;\n\n        for (let i = 0, len = data.length; i < len; i++) {\n          let childData = data[i];\n          let key = template.key(childData, i, data);\n          let facadeClass = template.facade;\n\n          // Some basic validation in dev mode\n          if (process.env.NODE_ENV !== 'production') {\n            if (key == null) {\n              throw new Error('ListFacade template \"key\" function must return a key.')\n            }\n            if (newDict[key]) {\n              console.warn(`Duplicate key in list: ${key}`);\n            }\n          }\n          while(newDict[key]) {\n            key += '|dupe';\n          }\n\n          // If a transition/animation is present, upgrade the class to a Animatable class on demand.\n          // NOTE: changing between animatable/non-animatable results in a full teardown/recreation\n          // of this instance *and its entire subtree*, so try to avoid that by always including the `transition`\n          // definition if the object is expected to ever need transitions, even if it's temporarily empty.\n          let transition = typeof template.transition === 'function' ? template.transition(childData, i, data) : template.transition;\n          let animation = typeof template.animation === 'function' ? template.animation(childData, i, data) : template.animation;\n          let exitAnimation = typeof template.exitAnimation === 'function' ? template.exitAnimation(childData, i, data) : template.exitAnimation;\n          if (transition || animation || exitAnimation) {\n            facadeClass = extendAsAnimatable(facadeClass);\n          }\n\n          // Same for pointer states\n          let pointerStates = template.pointerStates;\n          if (pointerStates === 'function' ? pointerStates(childData, i, data) : pointerStates) {\n            facadeClass = extendAsPointerStatesAware(facadeClass);\n          }\n\n          // If we have an old instance with the same key and class, reuse it; otherwise instantiate a new one\n          let oldImpl = oldDict && oldDict[key];\n          let newImpl;\n          if (oldImpl && oldImpl.constructor === facadeClass) {\n            newImpl = oldImpl;\n          } else {\n            // If swapping instance need to destroy the old before creating the new, e.g. for `ref` call ordering\n            if (oldImpl) oldImpl.destructor();\n            newImpl = new facadeClass(this);\n          }\n          //always set transition/animation before any other props\n          newImpl.transition = transition;\n          newImpl.animation = animation;\n          for (let prop in template) {\n            if (template.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {\n              newImpl[prop] = typeof template[prop] === 'function' ? template[prop](childData, i, data) : template[prop];\n            }\n          }\n          newImpl.afterUpdate();\n          newDict[key] = newImpl;\n          orderedItemKeys[i] = key;\n        }\n      }\n\n      // Destroy all old child instances that were not reused or replaced\n      if (oldDict) {\n        for (let key in oldDict) {\n          if (!newDict || !newDict[key]) {\n            oldDict[key].destructor();\n          }\n        }\n      }\n    }\n\n    super.afterUpdate();\n  }\n\n  /**\n   * Override to selectively prevent updating the ListFacade's items on `afterUpdate`, for\n   * potential performance gain.\n   * @returns {boolean}\n   */\n  shouldUpdateChildren() {\n    return true\n  }\n\n  /**\n   * Walk this facade's descendant tree, invoking a function for it and each descendant.\n   * The iteration order will match the order in which the `data` items were declared. It may\n   * also include items that have been queued for removal but not yet removed, e.g. facades\n   * in the process of an `exitAnimation`.\n   * @param {Function} fn\n   * @param {Object} [thisArg]\n   */\n  traverse(fn, thisArg) {\n    fn.call(thisArg, this);\n    let keys = this._orderedItemKeys;\n    let dict = this._itemsDict;\n    for (let i = 0, len = keys.length; i < len; i++) {\n      dict[keys[i]].traverse(fn, thisArg);\n    }\n  }\n\n  /**\n   * Iterate over this facade's direct child facades, invoking a function for each.\n   * The iteration order will match the order in which the `data` items were declared. It may\n   * also include items that have been queued for removal but not yet removed, e.g. facades\n   * in the process of an `exitAnimation`.\n   * @param {Function} fn\n   * @param {Object} [thisArg]\n   */\n  forEachChild(fn, thisArg) {\n    let keys = this._orderedItemKeys;\n    let dict = this._itemsDict;\n    for (let i = 0, len = keys.length; i < len; i++) {\n      fn.call(thisArg, dict[keys[i]], keys[i]);\n    }\n  }\n\n  destructor() {\n    this.isDestroying = true;\n    // Destroy all child instances\n    let dict = this._itemsDict;\n    if (dict) {\n      for (let key in dict) {\n        dict[key].destructor();\n      }\n    }\n    super.destructor();\n  }\n}\n\nconst TEMP_ARRAY$1 = [null];\n\n/**\n * @typedef {object} FacadeDescriptor\n * An object describing the type and properties of a child facade to be created and managed by\n * its parent. See the detailed description in the docs for {@link Facade.js}.\n * @property {class} facade\n * @property {string|number} [key]\n */\n\n\n/**\n * Base facade class for objects that have `children`. Manages creating and destroying child\n * facade instances as needed as its `children` array changes.\n *\n * If you need to create a large number of child objects based on an array of incoming data,\n * consider using a `ListFacade` instead of a parent object with a large `children` array, since\n * that requires only a single template descriptor object instead of one for every child.\n */\nclass ParentFacade extends Facade {\n  constructor(parent) {\n    super(parent);\n\n    /**\n     * @member {FacadeDescriptor | Array<FacadeDescriptor>} children\n     * Descriptors for one or more child facades.\n     */\n    this.children = null;\n\n    this._orderedChildKeys = [];\n  }\n\n  afterUpdate() {\n    if (this.shouldUpdateChildren()) {\n      this.updateChildren(this.describeChildren());\n    }\n    super.afterUpdate();\n  }\n\n  /**\n   * Return the descriptor(s) for the actual children to be created and managed. By default\n   * this simply returns the value of the `children` property set by the parent, but you can\n   * override it to customize how the child content should be structured, for instance to wrap\n   * the `children` within a deeper structure, add in anonymous child siblings, or modify the\n   * `children` configurations.\n   * @protected\n   * @return {FacadeDescriptor | Array<FacadeDescriptor>}\n   */\n  describeChildren() {\n    return this.children\n  }\n\n  /**\n   * Override to selectively prevent traversing to child nodes on `afterUpdate`, for\n   * potential performance gain.\n   * @returns {boolean}\n   */\n  shouldUpdateChildren() {\n    return true\n  }\n\n  updateChildren(children) {\n    const oldDict = this._childrenDict || null;\n    let newDict = this._childrenDict = null;\n    const orderedChildKeys = this._orderedChildKeys;\n    orderedChildKeys.length = 0;\n\n    if (children) {\n      // Allow single child without wrapper array\n      if (!Array.isArray(children)) {\n        TEMP_ARRAY$1[0] = children;\n        children = TEMP_ARRAY$1;\n      }\n\n      for (let i = 0, len = children.length; i < len; i++) {\n        let childDesc = children[i];\n        if (!childDesc) continue //child members can be null\n        if (!newDict) {\n          newDict = this._childrenDict = Object.create(null);\n        }\n\n        // Handle child descriptors defined via a JSX->React.createElement() transforms (ReactElement objects)\n        const isJSX = isReactElement(childDesc);\n        let propsObj = isJSX ? childDesc.props : childDesc;\n        let facadeClass = isJSX ? childDesc.type : childDesc.facade;\n\n        // Find this child's key; if not specified by the author, build one from the facade class name\n        let key = childDesc.key;\n        if (!key) {\n          let j = 0;\n          do {\n            key = `auto:${facadeClass.name}:${j++}`;\n          } while (newDict[key])\n        }\n\n        // Some basic validation in dev mode\n        if (process.env.NODE_ENV !== 'production') {\n          if (typeof facadeClass !== 'function') {\n            throw new Error('All scene objects must have a \"facade\" property pointing to a class/constructor')\n          }\n        }\n        if (newDict[key]) {\n          console.warn(`Duplicate key in children: ${key}`);\n          while(newDict[key]) {\n            key += '|dupe';\n          }\n        }\n\n        // If a transition/animation is present, upgrade the class to a Animatable class on demand.\n        // NOTE: changing between animatable/non-animatable results in a full teardown/recreation\n        // of this instance *and its entire subtree*, so try to avoid that by always including the `transition`\n        // definition if the object is expected to ever need transitions, even if it's temporarily empty.\n        let transition = propsObj.transition;\n        let animation = propsObj.animation;\n        if (transition || animation || propsObj.exitAnimation) {\n          facadeClass = extendAsAnimatable(facadeClass);\n        }\n\n        // Same for pointer states\n        if (propsObj.pointerStates) {\n          facadeClass = extendAsPointerStatesAware(facadeClass);\n        }\n\n        // If we have an old instance with the same key and class, update it, otherwise instantiate a new one\n        let oldImpl = oldDict && oldDict[key];\n        let newImpl;\n        if (oldImpl && oldImpl.constructor === facadeClass) {\n          newImpl = oldImpl;\n        } else {\n          // If swapping instance need to destroy the old before creating the new, e.g. for `ref` call ordering\n          if (oldImpl) oldImpl.destructor();\n          newImpl = new facadeClass(this);\n        }\n        //always set transition/animation before any other props\n        newImpl.transition = transition;\n        newImpl.animation = animation;\n        for (let prop in propsObj) {\n          if (propsObj.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {\n            newImpl[prop] = propsObj[prop];\n          }\n        }\n        newDict[key] = newImpl;\n        orderedChildKeys.push(key);\n        newImpl.afterUpdate();\n      }\n    }\n\n    // Destroy all old child instances that were not reused or replaced\n    if (oldDict) {\n      for (let key in oldDict) {\n        if (!newDict || !newDict[key]) {\n          oldDict[key].destructor();\n        }\n      }\n    }\n  }\n\n  getChildByKey(key) {\n    let dict = this._childrenDict;\n    return dict && dict[key] || null\n  }\n\n  /**\n   * Walk this facade's descendant tree, invoking a function for it and each descendant.\n   * The iteration order will match the order in which the `children` were declared. It may\n   * also include items that have been queued for removal but not yet removed, e.g. facades\n   * in the process of an `exitAnimation`.\n   * @param {Function} fn\n   * @param {Object} [thisArg]\n   */\n  traverse(fn, thisArg) {\n    fn.call(thisArg, this);\n    const keys = this._orderedChildKeys;\n    const dict = this._childrenDict;\n    for (let i = 0, len = keys.length; i < len; i++) {\n      dict[keys[i]].traverse(fn, thisArg);\n    }\n  }\n\n  /**\n   * Iterate over this facade's direct child facades, invoking a function for each.\n   * The iteration order will match the order in which the `children` were declared. It may\n   * also include items that have been queued for removal but not yet removed, e.g. facades\n   * in the process of an `exitAnimation`.\n   * @param {Function} fn\n   * @param {Object} [thisArg]\n   */\n  forEachChild(fn, thisArg) {\n    const keys = this._orderedChildKeys;\n    const dict = this._childrenDict;\n    for (let i = 0, len = keys.length; i < len; i++) {\n      fn.call(thisArg, dict[keys[i]], keys[i]);\n    }\n  }\n\n  destructor() {\n    this.isDestroying = true;\n    // Destroy all child instances\n    let dict = this._childrenDict;\n    if (dict) {\n      for (let key in dict) {\n        dict[key].destructor();\n      }\n    }\n    super.destructor();\n  }\n}\n\nconst pointerMotionEventProps = [\n  'onMouseOver',\n  'onMouseOut',\n  'onMouseMove',\n  'onDragStart',\n  'onDrag',\n  'onDragEnter',\n  'onDragOver',\n  'onDragLeave'\n];\n\nconst pointerActionEventProps = [\n  'onMouseDown',\n  'onMouseUp',\n  'onClick',\n  'onDoubleClick',\n  'onDrop',\n  'onDragEnd',\n  'onWheel'\n];\n\nconst pointerActionEventTypes = pointerActionEventProps.map(eventPropToType);\nconst pointerMotionEventTypes = pointerMotionEventProps.map(eventPropToType);\n\nconst pointerEventProps = pointerMotionEventProps.concat(pointerActionEventProps);\nconst pointerEventTypes = pointerMotionEventTypes.concat(pointerActionEventTypes);\n\nfunction eventPropToType(prop) {\n  return prop === 'onDoubleClick' ? 'dblclick' : prop.replace(/^on/, '').toLowerCase()\n}\n\n\nclass PointerEventTarget extends ParentFacade {\n  /**\n   * Determine if this PointerEventTarget should intercept pointer events:\n   * - By default only facades with a pointer event listener assigned will be counted, to prevent being blocked by unwanted objects\n   * - If an object should definitely block events from objects behind it, set `pointerEvents:true`\n   * - If an object has one of the pointer event properties but should be ignored in picking, set `pointerEvents:false`\n   */\n  interceptsPointerEvents(eventRegistry) {\n    if (this.pointerEvents === false) {\n      return false\n    }\n    if (this.pointerEvents) {\n      return true\n    }\n    for (let i = 0, len = pointerEventTypes.length; i < len; i++) {\n      if (eventRegistry.hasFacadeListenersOfType(this, pointerEventTypes[i])) {\n        return true\n      }\n    }\n  }\n}\n\n\nObject.defineProperty(PointerEventTarget.prototype, 'isPointerEventTarget', {value: true});\n\n\n// Add handlers for pointer event properties\npointerEventProps.forEach(propName => {\n  Facade.defineEventProperty(PointerEventTarget, propName, eventPropToType(propName));\n});\n\n/**\n * @class EventRegistry\n * Utility for tracking event listeners by type and target facade\n */\nfunction EventRegistry() {\n  const byEventType = Object.create(null);\n\n  this.addListenerForFacade = (facade, type, handler) => {\n    const listenersOfType = byEventType[type] || (byEventType[type] = {\n      count: 0,\n      byFacadeId: Object.create(null)\n    });\n    const facadeId = facade.$facadeId;\n    const oldHandlers = listenersOfType.byFacadeId[facadeId];\n    // No listeners for this facade yet; set handler function as single value to avoid\n    // unnecessary array creation in the common single-listener case.\n    if (!oldHandlers) {\n      listenersOfType.count++;\n      listenersOfType.byFacadeId[facadeId] = handler;\n    }\n    // Already multiple listeners; add to array if not already present\n    else if (Array.isArray(oldHandlers)) {\n      if (oldHandlers.indexOf(handler) === -1) {\n        listenersOfType.count++;\n        oldHandlers.push(handler);\n      }\n    }\n    // Second unique listener; promote to array\n    else if (oldHandlers !== handler) {\n      listenersOfType.count++;\n      listenersOfType.byFacadeId[facadeId] = [oldHandlers, handler];\n    }\n  };\n\n  this.removeListenerForFacade = (facade, type, handler) => {\n    const listenersOfType = byEventType[type];\n    const facadeId = facade.$facadeId;\n    const oldHandlers = listenersOfType && listenersOfType.byFacadeId[facadeId];\n    // Single listener; delete from map\n    if (oldHandlers === handler) {\n      listenersOfType.count--;\n      delete listenersOfType.byFacadeId[facadeId];\n    }\n    // Multiple listeners; remove from array\n    else if (Array.isArray(oldHandlers)) {\n      const idx = oldHandlers.indexOf(handler);\n      if (idx > -1) {\n        listenersOfType.count--;\n        // Delete from map if the array will be empty; we don't demote from array to single\n        // item because it can result in unneeded churn in the likely case of a different\n        // listener being added immediately after\n        if (oldHandlers.length === 1) {\n          delete listenersOfType.byFacadeId[facadeId];\n        } else {\n          oldHandlers.splice(idx, 1);\n        }\n      }\n    }\n  };\n\n  this.removeAllListenersForFacade = (facade) => {\n    const facadeId = facade.$facadeId;\n    for (let type in byEventType) {\n      let facadeListeners = byEventType[type].byFacadeId[facadeId];\n      if (facadeListeners) {\n        byEventType[type].count -= (Array.isArray(facadeListeners) ? facadeListeners.length : 1);\n        delete byEventType[type].byFacadeId[facadeId];\n      }\n    }\n  };\n\n  this.hasFacadeListenersOfType = (facade, type) => {\n    return byEventType[type] ? !!byEventType[type].byFacadeId[facade.$facadeId] : false\n  };\n\n  this.hasAnyListenersOfType = (type) => {\n    return byEventType[type] ? byEventType[type].count > 0 : false\n  };\n\n  this.findBubblingEventTarget = (targetFacade, eventType) => {\n    while (targetFacade) {\n      if (this.hasFacadeListenersOfType(targetFacade, eventType)) {\n        return targetFacade\n      }\n      targetFacade = targetFacade.parent;\n    }\n    return null\n  };\n\n  function tryCall(func, scope, arg1, arg2) {\n    try {\n      func.call(scope, arg1, arg2);\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  this.forEachFacadeListenerOfType = (facade, type, callback, scope) => {\n    const listenersOfType = byEventType[type];\n    const facadeId = facade.$facadeId;\n    const handlers = listenersOfType && listenersOfType.byFacadeId[facadeId];\n    if (handlers) {\n      if (Array.isArray(handlers)) {\n        for (let i = 0; i < handlers.length; i++) {\n          tryCall(callback, scope, handlers[i], facadeId);\n        }\n      } else {\n        tryCall(callback, scope, handlers, facadeId);\n      }\n    }\n  };\n\n  this.forEachListenerOfType = (type, callback, scope) => {\n    const listenersOfType = byEventType[type];\n    if (listenersOfType && listenersOfType.count > 0) {\n      for (let facadeId in listenersOfType.byFacadeId) {\n        const facadeListeners = listenersOfType.byFacadeId[facadeId];\n        if (Array.isArray(facadeListeners)) {\n          for (let i = 0; i < facadeListeners.length; i++) {\n            tryCall(callback, scope, facadeListeners[i], facadeId);\n          }\n        } else {\n          tryCall(callback, scope, facadeListeners, facadeId);\n        }\n      }\n    }\n  };\n\n  this.dispatchEventOnFacade = (facade, event) => {\n    let currentTarget = facade;\n    function callHandler(handler) {\n      handler.call(currentTarget, event);\n    }\n    event.target = facade;\n    while (currentTarget && !event.propagationStopped) { //TODO should defaultPrevented mean anything here?\n      event.currentTarget = currentTarget;\n      this.forEachFacadeListenerOfType(currentTarget, event.type, callHandler, null);\n      if (event.bubbles) {\n        currentTarget = currentTarget.parent;\n      } else {\n        break\n      }\n    }\n  };\n}\n\nconst TAP_DISTANCE_THRESHOLD = 10;\nconst TAP_GESTURE_MAX_DUR = 300;\nconst TAP_DBLCLICK_MAX_DUR = 300;\nconst DEFAULT_EVENT_SOURCE = {};\n\nconst domPointerMotionEventTypes = [\n  'mousemove',\n  'mouseout',\n  'touchmove'\n];\nconst domPointerActionEventTypes = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'wheel',\n  'touchstart',\n  'touchend',\n  'touchcancel'\n];\nconst dropEventTypes = [\n  'mouseup',\n  'touchend',\n  'touchcancel'\n];\nconst pointerActionEventTypeMappings = {\n  'touchstart': 'mousedown',\n  'touchend': 'mouseup',\n  'touchcancel': 'mouseup'\n};\n\nconst touchDragPropsToNormalize = ['clientX', 'clientY', 'screenX', 'screenY', 'pageX', 'pageY'];\n\nclass SyntheticEvent {\n  constructor(nativeEvent, type, target, relatedTarget, extraProps) {\n    // Copy native event properties - TODO investigate using a Proxy\n    for (let prop in nativeEvent) {\n      // NOTE: we don't check hasOwnProperty in this loop because properties that will return\n      // false for properties that are defined by getters on inherited prototypes\n      if (typeof nativeEvent[prop] !== 'function') {\n        this[prop] = nativeEvent[prop];\n      }\n    }\n\n    // Adjust to custom params\n    this.target = target;\n    this.relatedTarget = relatedTarget;\n    this.type = type;\n    this.nativeEvent = nativeEvent;\n    assign(this, extraProps);\n\n    // normalize position properties on touch events with a single touch, to facilitate\n    // downstream handlers that expect them to look like mouse events\n    // NOTE: can't do this in _normalizePointerEvent() as these props are unwritable on native Event objects\n    if (nativeEvent.touches) {\n      let touches = isTouchEndOrCancel(nativeEvent) ? nativeEvent.changedTouches : nativeEvent.touches;\n      if (touches.length === 1) {\n        touchDragPropsToNormalize.forEach(prop => {\n          this[prop] = touches[0][prop];\n        });\n      }\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.propagationStopped = true;\n    this.nativeEvent.stopPropagation();\n  }\n}\n\nfunction isTouchEndOrCancel(e) {\n  return e.type === 'touchend' || e.type === 'touchcancel'\n}\n\nfunction killEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\n\nclass WorldBaseFacade extends ParentFacade {\n  constructor(element) {\n    super(null);\n\n    this.width = this.height = 1;\n    this._element = element;\n    this._htmlOverlays = Object.create(null);\n\n    // Bind events\n    this.eventRegistry = new EventRegistry();\n    this._onPointerMotionEvent = this._onPointerMotionEvent.bind(this);\n    this._onPointerActionEvent = this._onPointerActionEvent.bind(this);\n    this._onDropEvent = this._onDropEvent.bind(this);\n    this._togglePointerListeners(true);\n  }\n\n  afterUpdate() {\n    this._queueRender();\n    super.afterUpdate();\n  }\n\n  onNotifyWorld(source, message, data) {\n    let handler = this._notifyWorldHandlers[message];\n    if (handler) {\n      handler.call(this, source, data);\n    }\n  }\n\n  _isContinuousRender() {\n    return this.continuousRender\n  }\n\n  /**\n   * @property {{requestAnimationFrame, cancelAnimationFrame}} renderingScheduler\n   * The object holding `requestAnimationFrame` and `cancelAnimationFrame` scheduling\n   * functions. Defaults to `window` but can be switched to another implementation, e.g.\n   * to use an XRSession's custom scheduler.\n   */\n  set renderingScheduler(scheduler) {\n    scheduler = scheduler || window;\n    if (scheduler !== this.renderingScheduler) {\n      const activeHandle = this._nextFrameTimer;\n      if (activeHandle) {\n        this.renderingScheduler.cancelAnimationFrame(activeHandle);\n        this._nextFrameTimer = null;\n      }\n      this._renderingScheduler = scheduler;\n    }\n  }\n  get renderingScheduler() {\n    return this._renderingScheduler || window\n  }\n\n  // Schedule a render pass on the next frame\n  _queueRender() {\n    if (!this._nextFrameTimer) {\n      const handler = this._nextFrameHandler || (this._nextFrameHandler = (...args) => {\n        let {onStatsUpdate, onBeforeRender, onAfterRender} = this;\n        let start = onStatsUpdate && Date.now();\n\n        if (onBeforeRender) onBeforeRender(this);\n\n        this.doRender(...args);\n\n        if (onStatsUpdate) {\n          let now = Date.now();\n          onStatsUpdate({\n            'Render CPU Time (ms)': now - start,\n            'Time Between Frames (ms)': this._lastFrameTime ? now - this._lastFrameTime : '?',\n            'FPS': this._lastFrameTime ? Math.round(1000 / (now - this._lastFrameTime)) : '?'\n          });\n          this._lastFrameTime = now;\n        }\n\n        this._doRenderHtmlItems();\n\n        if (onAfterRender) onAfterRender(this);\n\n        this._nextFrameTimer = null;\n\n        if (this._isContinuousRender()) {\n          this._queueRender();\n        }\n      });\n      this._nextFrameTimer = this.renderingScheduler.requestAnimationFrame(handler);\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  doRender(/*...frameArgs*/) {\n  }\n\n  /**\n   * @abstract\n   */\n  getFacadeUserSpaceXYZ(/*facade*/) {\n  }\n\n  _doRenderHtmlItems() {\n    if (this.renderHtmlItems) {\n      let htmlItemsData = [];\n      let overlayFacades = this._htmlOverlays;\n      for (let key in overlayFacades) {\n        let facade = overlayFacades[key];\n        let data = this.getFacadeUserSpaceXYZ(facade);\n        if (data.z >= 0) { //Ignore objects with negative z (behind the camera)\n          data.key = facade.$facadeId;\n          data.html = facade.html;\n          data.exact = facade.exact;\n          htmlItemsData.push(data);\n        }\n      }\n      this.renderHtmlItems(htmlItemsData);\n    }\n  }\n\n  /**\n   * Hook allowing world implementations to pre-normalize native pointer events, for instance\n   * computing derived worldspace properties that are simpler for downstream code to use.\n   * @param {Event} e\n   * @protected\n   */\n  _normalizePointerEvent(e) {\n  }\n\n  /**\n   * Entry point for handling events related to pointer motion (e.g. mouse or touch movement).\n   * This will be called by the code that wraps this World facade to bridge native DOM events\n   * into the Troika world.\n   * @param {Event} e\n   */\n  _onPointerMotionEvent(e) {\n    this._normalizePointerEvent(e);\n    const eventState = this._getPointerEventState(e);\n\n    if (pointerMotionEventTypes.some(this.eventRegistry.hasAnyListenersOfType)) {\n      const hoverInfo = (e.type === 'mouseout' || isTouchEndOrCancel(e)) ? null : this._findHoverTarget(e);\n      let lastHovered = eventState.hoveredFacade;\n      let hovered = eventState.hoveredFacade = hoverInfo && hoverInfo.facade;\n\n      let dragInfo = eventState.dragInfo;\n      if (dragInfo) {\n        if (!dragInfo.dragStartFired) {\n          this._firePointerEvent('dragstart', dragInfo.dragStartEvent, dragInfo.draggedFacade, null, hoverInfo);\n          dragInfo.dragStartFired = true;\n        }\n        this._firePointerEvent('drag', e, dragInfo.draggedFacade, null, hoverInfo);\n      }\n\n      if (hovered !== lastHovered) {\n        if (lastHovered) {\n          this._firePointerEvent('mouseout', e, lastHovered, hovered, hoverInfo);\n          if (dragInfo) {\n            this._firePointerEvent('dragleave', e, lastHovered, hovered, hoverInfo);\n          }\n        }\n        if (hovered) {\n          this._firePointerEvent('mouseover', e, hovered, lastHovered, hoverInfo);\n          if (dragInfo) {\n            this._firePointerEvent('dragenter', e, hovered, lastHovered, hoverInfo);\n          }\n        }\n      }\n      if (hovered) {\n        this._firePointerEvent('mousemove', e, hovered, null, hoverInfo);\n        if (dragInfo) {\n          this._firePointerEvent('dragover', e, hovered, null, hoverInfo);\n        }\n      }\n    }\n\n    // Cancel tap gesture if moving past threshold\n    let tapInfo = eventState.tapInfo;\n    if (tapInfo && e.type === 'touchmove') {\n      let touch = e.changedTouches[0];\n      if (touch && Math.sqrt(Math.pow(touch.clientX - tapInfo.x, 2) + Math.pow(touch.clientY - tapInfo.y, 2)) > TAP_DISTANCE_THRESHOLD) {\n        eventState.tapInfo = null;\n      }\n    }\n  }\n\n  /**\n   * Entry point for handling events related to pointer motion (e.g. mouse clicks or touch taps).\n   * This will be called by the code that wraps this World facade to bridge native DOM events\n   * into the Troika world.\n   * @param {Event} e\n   */\n  _onPointerActionEvent(e) {\n    this._normalizePointerEvent(e);\n\n    // Handle drop events, in the case they weren't captured by the listeners on `document`\n    // e.g. synthetic events dispatched internally\n    if (dropEventTypes.indexOf(e.type) > -1) {\n      this._onDropEvent(e);\n    }\n\n    // Map touch start to mouseover, and disable touch-hold context menu\n    if (e.type === 'touchstart') {\n      if (e.touches.length === 1) {\n        this._onPointerMotionEvent(e);\n      }\n      this._enableContextMenu(false);\n    }\n\n    const eventRegistry = this.eventRegistry;\n    if (eventRegistry.hasAnyListenersOfType('dragstart') || pointerActionEventTypes.some(eventRegistry.hasAnyListenersOfType)) {\n      let hoverInfo = this._findHoverTarget(e);\n      let facade = hoverInfo && hoverInfo.facade;\n      if (facade) {\n        const eventState = this._getPointerEventState(e);\n        this._firePointerEvent(pointerActionEventTypeMappings[e.type] || e.type, e, facade, null, hoverInfo);\n\n        // touchstart/touchend could be start/end of a tap - map to click\n        if (eventRegistry.findBubblingEventTarget(facade, 'click') || eventRegistry.findBubblingEventTarget(facade, 'dblclick')) {\n          let tapInfo = eventState.tapInfo;\n          if (e.type === 'touchstart' && e.touches.length === 1) {\n            eventState.tapInfo = {\n              facade: facade,\n              x: e.touches[0].clientX,\n              y: e.touches[0].clientY,\n              startTime: Date.now(),\n              isDblClick: tapInfo && Date.now() - tapInfo.startTime < TAP_DBLCLICK_MAX_DUR\n            };\n          } else {\n            if (\n              tapInfo && tapInfo.facade === facade && e.type === 'touchend' &&\n              e.touches.length === 0 && e.changedTouches.length === 1 &&\n              Date.now() - tapInfo.startTime < TAP_GESTURE_MAX_DUR\n            ) {\n              this._firePointerEvent('click', e, facade, null, hoverInfo);\n              if (tapInfo.isDblClick) {\n                this._firePointerEvent('dblclick', e, facade, null, hoverInfo);\n              }\n            }\n          }\n        }\n\n        // mousedown/touchstart could be prepping for drag gesture\n        if (e.type === 'mousedown' || e.type === 'touchstart') {\n          const dragger = eventRegistry.findBubblingEventTarget(facade, 'dragstart');\n          if (dragger) {\n            let dragStartEvent = new SyntheticEvent(e, 'dragstart', dragger, null, {intersection: hoverInfo});\n            eventState.dragInfo = {\n              draggedFacade: dragger,\n              dragStartFired: false,\n              dragStartEvent: dragStartEvent\n            };\n            // handle release outside canvas\n            this._toggleDropListeners(true);\n          }\n        }\n      }\n      e.preventDefault(); //prevent e.g. touch scroll\n    }\n\n    // Map touch end to mouseout\n    if (isTouchEndOrCancel(e)) {\n      if (e.changedTouches.length === 1) {\n        this._onPointerMotionEvent(e);\n      }\n      this._enableContextMenu(true);\n    }\n  }\n\n  _onDropEvent(e) {\n    const eventState = this._getPointerEventState(e);\n    let dragInfo = eventState.dragInfo;\n    if (dragInfo) {\n      this._normalizePointerEvent(e);\n      let hoverInfo = this._findHoverTarget(e);\n      let targetFacade = hoverInfo && hoverInfo.facade;\n      if (targetFacade) {\n        this._firePointerEvent('drop', e, targetFacade, null, hoverInfo);\n      }\n      this._firePointerEvent('dragend', e, dragInfo.draggedFacade, null, hoverInfo);\n      this._toggleDropListeners(false);\n      eventState.dragInfo = null;\n    }\n  }\n\n  _firePointerEvent(eventType, originalEvent, targetFacade, relatedTargetFacade, intersection) {\n    let newEvent = (originalEvent instanceof SyntheticEvent) ?\n      originalEvent :\n      new SyntheticEvent(\n        originalEvent,\n        eventType,\n        targetFacade,\n        relatedTargetFacade,\n        {\n          bubbles: true,\n          intersection\n        }\n      );\n    // Dispatch with bubbling\n    this.eventRegistry.dispatchEventOnFacade(targetFacade, newEvent);\n  }\n\n  _getPointerEventState(e) {\n    const states = this._pointerEventStates || (this._pointerEventStates = new WeakMap());\n    const eventSource = e.eventSource || DEFAULT_EVENT_SOURCE;\n    let eventState = states.get(eventSource);\n    if (!eventState) {\n      states.set(eventSource, eventState = {});\n    }\n    return eventState\n  }\n\n  _toggleDropListeners(on) {\n    dropEventTypes.forEach(type => {\n      document[(on ? 'add' : 'remove') + 'EventListener'](type, this._onDropEvent, true);\n    });\n  }\n\n  _togglePointerListeners(on) {\n    let canvas = this._element;\n    if (canvas && on !== this._pointerListenersAttached) {\n      let method = (on ? 'add' : 'remove') + 'EventListener';\n      domPointerMotionEventTypes.forEach(type => {\n        canvas[method](type, this._onPointerMotionEvent, false);\n      });\n      domPointerActionEventTypes.forEach(type => {\n        canvas[method](type, this._onPointerActionEvent, false);\n      });\n      this._pointerListenersAttached = on;\n    }\n  }\n\n  _enableContextMenu(enable) {\n    let canvas = this._element;\n    if (canvas) {\n      canvas[(enable ? 'remove' : 'add') + 'EventListener']('contextmenu', killEvent, true);\n    }\n  }\n\n  /**\n   * @abstract\n   * Given a pointer-related Event, find and return all facade objects that are intersected\n   * by that event. If any hits are found, this should return an array of objects that contain\n   * at least `facade` and `distance` properties. Any additional properties will be exposed to\n   * event listeners on the synthetic event object as an `intersection` property.\n   * @param {Event} e\n   * @param {Function} [filterFn]\n   * @return {Array<{facade, distance, ?distanceBias, ...}>|null}\n   */\n  getFacadesAtEvent(e, filterFn) {\n    throw new Error('getFacadesAtEvent: no impl')\n  }\n\n  _findHoverTarget(e) {\n    //only handle single touches for now\n    if (e.touches && e.touches.length > 1) {\n      return null\n    }\n\n    let allHits = this.getFacadesAtEvent(e, facade =>\n      facade.isPointerEventTarget && facade.interceptsPointerEvents(this.eventRegistry)\n    );\n    if (allHits) {\n      // Find the closest by comparing distance, or distanceBias if distance is the same\n      let closestHit = allHits[0];\n      for (let i = 1; i < allHits.length; i++) {\n        if (allHits[i].distance < closestHit.distance ||\n          (allHits[i].distance === closestHit.distance && (allHits[i].distanceBias || 0) < (closestHit.distanceBias || 0))\n        ) {\n          closestHit = allHits[i];\n        }\n      }\n      return closestHit\n    }\n\n    return null\n  }\n\n  destructor() {\n    if (this._nextFrameTimer) {\n      this.renderingScheduler.cancelAnimationFrame(this._nextFrameTimer);\n    }\n    this._togglePointerListeners(false);\n    this._toggleDropListeners(false);\n    super.destructor();\n  }\n\n}\n\nObject.defineProperty(WorldBaseFacade.prototype, 'isWorld', {value: true});\n\nWorldBaseFacade.prototype._notifyWorldHandlers = {\n  needsRender() {\n    this._queueRender();\n  },\n  addEventListener(source, data) {\n    this.eventRegistry.addListenerForFacade(source, data.type, data.handler);\n  },\n  removeEventListener(source, data) {\n    this.eventRegistry.removeListenerForFacade(source, data.type, data.handler);\n  },\n  removeAllEventListeners(source) {\n    this.eventRegistry.removeAllListenersForFacade(source);\n  },\n  dispatchEvent(source, event) {\n    if (!(event instanceof SyntheticEvent)) {\n      event = new SyntheticEvent(event, event.type, event.target, event.relatedTarget);\n    }\n    this.eventRegistry.dispatchEventOnFacade(source, event);\n  },\n  addHtmlOverlay(source) {\n    this._htmlOverlays[source.$facadeId] = source;\n  },\n  removeHtmlOverlay(source) {\n    delete this._htmlOverlays[source.$facadeId];\n  },\n  statsUpdate(source, data) {\n    let onStatsUpdate = this.onStatsUpdate;\n    if (onStatsUpdate) onStatsUpdate(data);\n  }\n};\n\nconst CT_STYLES = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  pointerEvents: 'none',\n  transformStyle: 'preserve-3d'\n};\n\nclass HtmlOverlayContent extends React.Component {\n  shouldComponentUpdate (newProps) {\n    return (\n      newProps.html !== this.props.html ||\n      (newProps.html.props && newProps.html.props.shouldUpdateOnMove) === true\n    )\n  }\n\n  render () {\n    let html = this.props.html;\n    return typeof html === 'string'\n      ? React.createElement('span', null, html)\n      : React.cloneElement(html)\n  }\n}\n\nHtmlOverlayContent.displayName = 'Canvas3D.HtmlOverlayContent';\nHtmlOverlayContent.propTypes = {\n  html: T.node\n};\n\nclass HtmlOverlay extends React.Component {\n  constructor (props) {\n    super(props);\n    this.setItems = this.setItems.bind(this);\n    this.state = {\n      items: null\n    };\n  }\n\n  shouldComponentUpdate (newProps, newState) {\n    let oldState = this.state;\n    return (\n      (newState.items && newState.items.length) ||\n      (oldState.items && oldState.items.length)\n    )\n  }\n\n  setItems (items) {\n    let lastItems = this.state.items;\n    if ((items && items.length) || (lastItems && lastItems.length)) {\n      this.setState({ items: items || null });\n    }\n  }\n\n  render () {\n    let items = this.state.items;\n    let round = Math.round;\n    return items && items.length\n      ? React.createElement(\n        'div',\n        {\n          className: 'troika_html_overlay',\n          style: CT_STYLES\n        },\n        items.map(({ key, html, x, y, z, exact }) => {\n          if (!exact) {\n            x = round(x);\n            y = round(y);\n          }\n          return React.createElement(\n            'div',\n            {\n              key,\n              style: {\n                position: 'absolute',\n                transform: `translate3d(${x}px, ${y}px, ${-z}px)`\n              }\n            },\n            React.createElement(HtmlOverlayContent, {html})\n          )\n        })\n      )\n      : null\n  }\n}\n\nHtmlOverlay.displayName = 'Canvas3D.HtmlOverlay';\n\nconst style = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  background: 'rgba(0,0,0,.5)',\n  font: '11px sans-serif',\n  padding: 10\n};\n\nclass Stats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {stats: {}};\n  }\n\n  setStats(stats) {\n    this.setState({stats});\n  }\n\n  render() {\n    let stats = this.state.stats;\n    return (\n      React.createElement(\n        'div',\n        {style},\n        Object.keys(stats).sort().map(key =>\n          React.createElement('div', {key}, `${ key }: ${ stats[key] }`)\n        )\n      )\n    )\n  }\n}\n\nconst defaultCanvasStyle = {width: '100%', height: '100%'};\n\n\nclass CanvasBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this._stats = {};\n    this.updateStats = this.updateStats.bind(this);\n    this.renderHtmlItems = this.renderHtmlItems.bind(this);\n    this._bindHtmlOverlayRef = this._bindHtmlOverlayRef.bind(this);\n    this._bindCanvasRef = this._bindCanvasRef.bind(this);\n    this._bindStatsRef = this._bindStatsRef.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.updateWorld();\n  }\n\n  initWorld(canvas) {\n    const world = new this.props.worldFacade(canvas);\n    world.renderHtmlItems = this.renderHtmlItems;\n    return world\n  }\n\n  updateWorld() {\n    const world = this._world;\n    if (world) {\n      const {props} = this;\n      let useStats = props.stats;\n      let start = useStats && Date.now();\n\n      world.width = props.width;\n      world.height = props.height;\n      world.pixelRatio = props.pixelRatio;\n      world.continuousRender = props.continuousRender;\n      world.onStatsUpdate = useStats ? this.updateStats : null;\n      assign(world, props.worldProps);\n      world.afterUpdate();\n\n      if (useStats) {\n        this.updateStats({'Last World Update (ms)': Date.now() - start});\n      }\n    }\n  }\n\n  destroyWorld() {\n    //just to see it burn\n    if (this._world) {\n      this._world.destructor();\n      delete this._world;\n    }\n    clearTimeout(this._statsDelay);\n  }\n\n  renderHtmlItems(items) {\n    if (this._htmlOverlayRef) {\n      this._htmlOverlayRef.setItems(items);\n    }\n  }\n\n  updateStats(stats) {\n    this._stats = assign({}, this._stats, stats);\n\n    if (!this._statsDelay) {\n      this._statsDelay = setTimeout(() => {\n        this._statsDelay = null;\n        let ref = this._statsRef;\n        if (ref) {\n          ref.setStats(this._stats);\n        }\n      }, 250);\n    }\n  }\n\n  _bindHtmlOverlayRef(cmp) {\n    this._htmlOverlayRef = cmp;\n  }\n\n  _bindCanvasRef(canvas) {\n    if (canvas) {\n      try {\n        this._world = this.initWorld(canvas);\n        this.updateWorld();\n      } catch (e) {\n        console.warn(`Troika.${this.constructor.displayName}: world init failed, using fallback content.`, e);\n        this._failedWorldInit = true;\n        this._world = null;\n        this.forceUpdate();\n      }\n    } else {\n      this.destroyWorld();\n    }\n\n    // Call external ref callback\n    const cb = this.props.onCanvasRef;\n    if (cb) cb(canvas);\n  }\n\n  _bindStatsRef(ref) {\n    this._statsRef = ref;\n  }\n\n  render() {\n    let { props } = this;\n    return (\n      React.createElement(\n        'div',\n        {\n          className: `troika ${props.className || ''}`,\n          style: {\n            position: 'relative',\n            overflow: 'hidden',\n            width: props.width,\n            height: props.height,\n            cursor: props.cursor,\n            userSelect: 'none'\n          }\n        },\n        this._failedWorldInit ? this.props.children : React.createElement(\n          'canvas',\n          {\n            className: \"troika_canvas\",\n            ref: this._bindCanvasRef,\n            style: props.canvasStyle || defaultCanvasStyle\n          }\n        ),\n        React.createElement(HtmlOverlay, {ref: this._bindHtmlOverlayRef}),\n        props.stats ? React.createElement(Stats, {ref: this._bindStatsRef}) : null\n      )\n    )\n  }\n}\n\nCanvasBase.commonPropTypes = {\n  width: T.number.isRequired,\n  height: T.number.isRequired,\n  pixelRatio: T.number,\n  worldFacade: T.func,\n  worldProps: T.object,\n  canvasStyle: T.object,\n  className: T.string,\n  continuousRender: T.bool,\n  onCanvasRef: T.func,\n  stats: T.bool,\n  cursor: T.string\n};\n\nexport { Facade, List as ListFacade, ParentFacade, PointerEventTarget, CanvasBase as ReactCanvasBase, WorldBaseFacade, utils };\n", "import { Vector3, Object3D, Sphere, Raycaster, Vector2, Matrix4, Quaternion, Frustum, Ray, PerspectiveCamera, OrthographicCamera, Group, AmbientLight, DirectionalLightHelper, DirectionalLight, SpotLightHelper, SpotLight, PointLightHelper, PointLight, HemisphereLightHelper, HemisphereLight, RectAreaLight, InstancedBufferGeometry, InstancedBufferAttribute, Scene, FogExp2, Fog, WebGLRenderer, Color, LinearSRGBColorSpace, NoToneMapping, CanvasTexture, BufferGeometry, MeshBasicMaterial, Mesh, MeshStandardMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshToonMaterial, BoxGeometry, CircleGeometry, DoubleSide, PlaneGeometry, SphereGeometry } from 'three';\nimport { PointerEventTarget, Facade, utils, WorldBaseFacade, ReactCanvasBase } from 'troika-core';\nexport { Facade, ListFacade, ParentFacade } from 'troika-core';\nimport { invertMatrix4, createDerivedMaterial, getShaderUniformTypes, voidMainRegExp, getShadersForMaterial } from 'troika-three-utils';\nexport { createDerivedMaterial } from 'troika-three-utils';\nimport React from 'react';\nimport T from 'prop-types';\n\nconst {assign, forOwn} = utils;\nconst singletonVec3 = new Vector3();\nconst singletonVec3b = new Vector3();\nconst notifyWorldGetter = (function() {\n  const obj = {\n    callback: function(pos) {\n      obj.value = pos;\n    },\n    value: null\n  };\n  return obj\n})();\nconst removedEvent = {type: 'removed'};\nconst singletonIntersects = [];\n\nfunction ascDistanceSort(a, b) {\n  return a.distance - b.distance\n}\n\nfunction canObjectBeOrphaned(obj) {\n  return obj.isRenderable === false && (\n    !obj.children.length || obj.children.every(canObjectBeOrphaned)\n  )\n}\n\nlet _worldMatrixVersion = 0;\nlet _geometrySphereVersion = 0;\n\nclass Object3DFacade extends PointerEventTarget {\n  constructor(parent, threeObject) {\n    super(parent);\n\n    if (!threeObject) {\n      threeObject = this.initThreeObject();\n    }\n\n    // We'll track matrix updates manually\n    threeObject.matrixAutoUpdate = false;\n\n    // Set bidirectional refs\n    this.threeObject = threeObject;\n    threeObject.$facade = this;\n\n    // Subclasses may set isRenderable=false on the threeObject, to trigger some scene graph optimizations.\n    // The first is to remove it from all layer masks to short-circuit WebGLRenderer.projectObject.\n    let isRenderable = threeObject.isRenderable !== false;\n    if (!isRenderable) {\n      threeObject.layers.mask = 0;\n    }\n\n    // Add it as a child of the nearest parent threeObject, if one exists\n    while (parent) {\n      if (parent.isObject3DFacade) {\n        this._parentObject3DFacade = parent; //reference to nearest Object3DFacade ancestor\n        if (isRenderable) {\n          this._addToThreeObjectTree();\n        }\n        break\n      }\n      parent = parent.parent;\n    }\n\n    this.notifyWorld('object3DAdded');\n  }\n\n  /**\n   * Lifecycle method, called at constructor time, that creates and returns a Three.js `Object3D`\n   * instance which will become the `threeObject` for this facade. This is a more ergonomic\n   * alternative than overriding the constructor to pass the `threeObject` as a second argument\n   * to the super() call. By default it creates a plain Object3D marked as non-renderable so it\n   * is not added to the Three.js tree.\n   * @return {Object3D}\n   * @protected\n   */\n  initThreeObject() {\n    const obj = new Object3D();\n    obj.isRenderable = false; //trigger optimizations\n    return obj\n  }\n\n  afterUpdate() {\n    // Update matrix and worldMatrix before processing children\n    this.updateMatrices();\n    this._checkBoundsChange();\n\n    // If the world matrix was modified, and we won't be doing an update pass on child facades due\n    // to `shouldUpdateChildren` optimization, we need to manually update their matrices to match.\n    if (this._worldMatrixVersion > this._worldMatrixVersionAfterLastUpdate) {\n      if (!this.shouldUpdateChildren()) {\n        this.traverse((facade, rootFacade) => {\n          if (facade !== rootFacade && facade.updateMatrices) {\n            facade.updateMatrices();\n            facade._checkBoundsChange();\n          }\n        }, this);\n      }\n      this._worldMatrixVersionAfterLastUpdate = this._worldMatrixVersion;\n    }\n\n    // Process children\n    super.afterUpdate();\n\n    // If any children were removed during the update, remove them from the threejs\n    // object in a single batch; this avoids threejs's very expensive single-item remove.\n    this._flushQueuedChildRemovals();\n  }\n\n  /**\n   * Update the underlying threeObject's `matrix` and `matrixWorld` to the current state if necessary.\n   * This bypasses the `updateMatrix` and `updateMatrixWorld` methods of the threejs objects with a more\n   * efficient approach that doesn't require traversing the entire tree prior to every render. This is possible\n   * since we control the update lifecycle; as long as this is called from the `afterUpdate` lifecycle\n   * method or later, it can be safely assumed that the world matrices of all ancestors have already been\n   * similarly updated so the result should always be accurate.\n   */\n  updateMatrices() {\n    let threeObj = this.threeObject;\n    let parent3DFacade = this._parentObject3DFacade;\n    let needsWorldMatrixUpdate;\n    if (this._matrixChanged) {\n      threeObj.matrix.compose(threeObj.position, threeObj.quaternion, threeObj.scale);\n      this._matrixChanged = false;\n      needsWorldMatrixUpdate = true;\n    } else {\n      needsWorldMatrixUpdate = parent3DFacade && parent3DFacade._worldMatrixVersion > this._worldMatrixVersion;\n    }\n    if (needsWorldMatrixUpdate) {\n      if (parent3DFacade) {\n        threeObj.matrixWorld.multiplyMatrices(parent3DFacade.threeObject.matrixWorld, threeObj.matrix);\n      } else {\n        threeObj.matrixWorld.copy(threeObj.matrix);\n      }\n\n      // If the threeObject has children that were manually added (not managed by facades), we'll need to update them too\n      // TODO can we determine this state without a full loop that will likely return nothing?\n      let threeKids = threeObj.children;\n      for (let i = 0, len = threeKids.length; i < len; i++) {\n        if (!threeKids[i].$facade) {\n          threeKids[i].updateMatrixWorld(true);\n        }\n      }\n\n      this.markWorldMatrixDirty();\n    }\n  }\n\n  /**\n   * If the `threeObject.matrixWorld` is modified manually instead of via the individual transformation\n   * properties, you can call this to tell the facade its caches need to be recalculated.\n   */\n  markWorldMatrixDirty() {\n    this._worldMatrixVersion = ++_worldMatrixVersion;\n    this._boundsChanged = true;\n  }\n\n  _checkBoundsChange() {\n    let changed = this._boundsChanged;\n    if (!changed) {\n      const geomSphere = this._getGeometryBoundingSphere();\n      if (geomSphere && geomSphere.version !== this._lastGeometrySphereVersion) {\n        changed = true;\n        this._lastGeometrySphereVersion = geomSphere.version;\n      }\n    }\n    if (changed) {\n      this.notifyWorld('object3DBoundsChanged');\n      this._boundsChanged = false;\n    }\n  }\n\n  /**\n   * Get this object's current position in world space\n   * @param {Vector3} [vec3] - optional Vector3 object to populate with the position;\n   *                  if not passed in a new one will be created.\n   * @returns {Vector3}\n   */\n  getWorldPosition(vec3 ) {\n    this.updateMatrices();\n    return (vec3 || new Vector3()).setFromMatrixPosition(this.threeObject.matrixWorld)\n  }\n\n  /**\n   * Get the current position vector of the world's camera.\n   * @param {Vector3} [vec3] - optional Vector3 object to populate with the position;\n   *                  if not passed in a new one will be created.\n   * @returns {Vector3}\n   */\n  getCameraPosition(vec3 ) {\n    vec3 = vec3 || new Vector3();\n    this.notifyWorld('getCameraPosition', vec3);\n    return vec3\n  }\n\n  /**\n   * Get the facade object for the world's camera. Can be used to get to low-level info\n   * about the camera such as its various matrices, but be careful not to make modifications\n   * to the camera as that can lead to things getting out of sync.\n   * @returns {Camera3DFacade}\n   */\n  getCameraFacade() {\n    notifyWorldGetter.value = null;\n    this.notifyWorld('getCameraFacade', notifyWorldGetter);\n    return notifyWorldGetter.value\n  }\n\n  /**\n   * Calculate the distance in world units between this object's origin and the camera.\n   * @returns {Number}\n   */\n  getCameraDistance() {\n    let cameraPos = this.getCameraPosition(singletonVec3b);\n    let objectPos = this.getWorldPosition(singletonVec3);\n    return cameraPos.distanceTo(objectPos)\n  }\n\n  /**\n   * Get the current projected user space position for this object, or for a specific position\n   * in its object space.\n   * @returns {Vector3} x and y are in screen pixels, z is worldspace distance from camera. The\n   *                    z may be negative, which means it is out of view behind the camera.\n   */\n  getProjectedPosition(x, y, z) {\n    this.updateMatrices();\n    notifyWorldGetter.value = null;\n    notifyWorldGetter.worldPosition = singletonVec3.set(x || 0, y || 0, z || 0).applyMatrix4(this.threeObject.matrixWorld);\n    this.notifyWorld('projectWorldPosition', notifyWorldGetter);\n    return notifyWorldGetter.value\n  }\n\n  /**\n   * Get the facade object for the world's scene.\n   * @returns {Scene3DFacade}\n   */\n  getSceneFacade() {\n    notifyWorldGetter.value = null;\n    this.notifyWorld('getSceneFacade', notifyWorldGetter);\n    return notifyWorldGetter.value\n  }\n\n  /**\n   * Return a {@link Sphere} encompassing the bounds of this object in worldspace, or `null` if\n   * it has no physical bounds. This is used for optimized raycasting.\n   *\n   * The default implementation attempts to be as efficient as possible, only updating the sphere\n   * when necessary, and assumes the threeObject has a geometry that accurately describes its bounds.\n   * Override this method to provide custom bounds calculation logic, for example when additional meshes\n   * need to be checked or a vertex shader manipulates the geometry; you'll probably also need to override\n   * {@link #raycast} to match.\n   *\n   * TODO: this needs to be easier to override without having to reimplement large chunks of logic\n   */\n  getBoundingSphere() {\n    // Get the geometry's current bounding sphere\n    let geomSphere = this._getGeometryBoundingSphere();\n    if (!geomSphere) return null\n\n    // Ensure world matrix is up to date\n    this.updateMatrices();\n\n    // Lazily create our Sphere\n    let sphere = this._boundingSphere;\n    if (!sphere) {\n      sphere = this._boundingSphere = new Sphere();\n    }\n\n    // If the geometry, the geometry's bounding sphere, or this object's world matrix changed,\n    // update our bounding sphere to match them.\n    if (sphere._geometrySphereVersion !== geomSphere.version || sphere._worldMatrixVersion !== this._worldMatrixVersion) {\n      sphere.copy(geomSphere);\n      sphere.applyMatrix4(this.threeObject.matrixWorld);\n      sphere._worldMatrixVersion = this._worldMatrixVersion;\n      sphere._geometrySphereVersion = geomSphere.version;\n    }\n\n    return sphere\n  }\n\n  /**\n   * Ensure the object's geometry, if any, has an up-to-date bounding Sphere, and return that Sphere.\n   * The returned Sphere will be assigned a unique `version` property when it is modified, which can\n   * be used elsewhere for tracking changes.\n   * @private\n   */\n  _getGeometryBoundingSphere() {\n    const geometry = this.getGeometry();\n    if (geometry) {\n      let geomSphere = geometry.boundingSphere;\n      let geomSphereChanged = false;\n      if (geomSphere) {\n        if (geometry.isBufferGeometry) {\n          // For a BufferGeometry we can look at the `position` attribute's `version` (incremented\n          // when the user sets `geom.needsUpdate = true`) to detect the need for bounds recalc\n          const posAttr = geometry.attributes.position;\n          if (posAttr && geomSphere._posAttrVersion !== posAttr.version) {\n            geometry.computeBoundingSphere();\n            geomSphere._posAttrVersion = posAttr.version;\n            geomSphereChanged = true;\n          }\n        } else {\n          // For a non-buffer Geometry (not recommended!) users will have to manually call\n          // `geom.computeBoundingSphere()` after changing its vertices, and we'll do a brute force\n          // check for changes to the sphere's properties\n          if (!geometry._lastBoundingSphere || !geomSphere.equals(geometry._lastBoundingSphere)) {\n            geometry._lastBoundingSphere = geomSphere.clone();\n            geomSphereChanged = true;\n          }\n        }\n      } else {\n        geometry.computeBoundingSphere();\n        geomSphere = geometry.boundingSphere;\n        geomSphereChanged = true;\n      }\n      if (geomSphereChanged) {\n        geomSphere.version = ++_geometrySphereVersion;\n      }\n      return geomSphere\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * @protected Extension point for subclasses that don't use their threeObject's geometry, e.g. Instanceable\n   */\n  getGeometry() {\n    const obj = this.threeObject;\n    return obj && obj.geometry\n  }\n\n  /**\n   * Determine if this facade's threeObject intersects a Raycaster. Override this method to provide\n   * custom raycasting logic, for example when additional meshes need to be checked or a vertex shader\n   * manipulates the geometry; you'll probably also need to override {@link #getBoundingSphere} to match.\n   *\n   * The return value can be:\n   *   - An array of hit objects for this facade, matching the format returned by `Raycaster.intersectObject`\n   *   - `null`, if this facade has no hits\n   */\n  raycast(raycaster) {\n    return this.threeObject ? this._raycastObject(this.threeObject, raycaster) : null\n  }\n\n  /**\n   * Custom optimized raycast that, unlike Raycaster.intersectObject(), avoids creating a\n   * new array unless there are actually hits. It also supports the custom `raycastSide`\n   * override property, hit on sides other than the material's configured `side`.\n   * @protected\n   */\n  _raycastObject(obj, raycaster) {\n    if (obj.visible) {\n      singletonIntersects.length = 0;\n      let origSide = null;\n      const raycastSide = this.raycastSide;\n      if (raycastSide != null) {\n        origSide = obj.material.side;\n        obj.material.side = raycastSide;\n      }\n      obj.raycast(raycaster, singletonIntersects);\n      if (origSide !== null) {\n        obj.material.side = origSide;\n      }\n      if (singletonIntersects.length) {\n        singletonIntersects.sort(ascDistanceSort);\n        return singletonIntersects.slice()\n      }\n    }\n    return null\n  }\n\n  _addToThreeObjectTree() {\n    let parent = this._parentObject3DFacade;\n    if (parent) {\n      if (this.threeObject.parent !== parent.threeObject) {\n        parent.threeObject.add(this.threeObject);\n        parent._addToThreeObjectTree();\n      }\n    }\n  }\n\n  _queueRemoveChildObject3D(threeObjectId) {\n    let removeChildIds = this._removeChildIds || (this._removeChildIds = Object.create(null));\n    removeChildIds[threeObjectId] = true;\n  }\n\n  _flushQueuedChildRemovals() {\n    // If any children were queued for removal, remove them from the threejs\n    // object in a single batch; this avoids threejs's very expensive single-item remove.\n    if (this._removeChildIds) {\n      let threeObject = this.threeObject;\n      let removeChildIds = this._removeChildIds;\n      threeObject.children = threeObject.children.filter(child => {\n        if (child.id in removeChildIds) {\n          child.parent = null;\n          child.dispatchEvent(removedEvent);\n          return false\n        }\n        return true\n      });\n\n      // If that resulted in a non-renderable object having no renderable children,\n      // remove it from the threejs object tree, recursively upward.\n      let parentObj3D = this._parentObject3DFacade;\n      if (canObjectBeOrphaned(threeObject) && parentObj3D && parentObj3D.threeObject === threeObject.parent) {\n        parentObj3D._queueRemoveChildObject3D(threeObject.id);\n        parentObj3D._flushQueuedChildRemovals(); //if we don't force a parent flush, tree can get in a bad state\n      }\n\n      this._removeChildIds = null;\n    }\n  }\n\n  destructor() {\n    this.notifyWorld('object3DRemoved');\n    let parentObj3D = this._parentObject3DFacade;\n    if (parentObj3D) {\n      parentObj3D._queueRemoveChildObject3D(this.threeObject.id);\n    }\n    delete this.threeObject;\n    super.destructor();\n  }\n}\n\n\n// Convenience setters for Object3D simple properties\n['castShadow', 'receiveShadow', 'renderOrder', 'visible'].forEach(prop => {\n  Object.defineProperty(Object3DFacade.prototype, prop, {\n    get() {\n      return this.threeObject[prop]\n    },\n    set(value) {\n      this.threeObject[prop] = value;\n    }\n  });\n});\n\n/**\n * @property {null|number} raycastSide\n * Hook to force a different `side` than that of the material for mesh raycasting.\n * Should be set to `FrontSide`|`BackSide`|`DoubleSide`, or `null` to use the\n * material's side.\n */\nObject3DFacade.prototype.raycastSide = null;\n\n\n// Create flat property setters for individual position/scale/rotation properties\nforOwn({\n  position: {\n    x: 'x',\n    y: 'y',\n    z: 'z'\n  },\n  scale: {\n    x: 'scaleX',\n    y: 'scaleY',\n    z: 'scaleZ'\n  },\n  rotation: {\n    x: 'rotateX',\n    y: 'rotateY',\n    z: 'rotateZ',\n    order: 'rotateOrder'\n  },\n  quaternion: {\n    x: 'quaternionX',\n    y: 'quaternionY',\n    z: 'quaternionZ',\n    w: 'quaternionW'\n  }\n}, (attrs, aspect) => {\n  forOwn(attrs, (propName, attr) => {\n    // Compile functions to avoid runtime cost of aspect/attr evaluation\n    Object.defineProperty(Object3DFacade.prototype, propName, {\n      get: new Function(`return function ${propName}$get() {\n  return this.threeObject.${aspect}.${attr}\n}`)(),\n      set: new Function(`return function ${propName}$set(value) {\n  //let obj = this.threeObject.${aspect}\n  if (this.threeObject.${aspect}.${attr} !== value) {\n    this.threeObject.${aspect}.${attr} = value\n    if (!this._matrixChanged) {\n      this._matrixChanged = true\n    }\n  }\n}`)()\n    });\n  });\n});\n\n// ...and a special shortcut for uniform scale\nObject.defineProperty(Object3DFacade.prototype, 'scale', {\n  get() {\n    // can't guarantee scale was already uniform, so just use scaleX arbitrarily\n    return this.threeObject.scale.x\n  },\n  set(value) {\n    const scaleObj = this.threeObject.scale;\n    if (value !== scaleObj.x || value !== scaleObj.y || value !== scaleObj.z) {\n      scaleObj.x = scaleObj.y = scaleObj.z = value;\n      if (!this._matrixChanged) {\n        this._matrixChanged = true;\n      }\n    }\n  }\n});\n\n\nObject.defineProperty(Object3DFacade.prototype, 'isObject3DFacade', {value: true});\n\n// Predefine shape to facilitate JS engine optimization\nassign(Object3DFacade.prototype, {\n  threeObject: null,\n  _parentObject3DFacade: null,\n  _removeChildIds: null,\n  _matrixChanged: true,\n  _worldMatrixVersion: -1,\n  _worldMatrixVersionAfterLastUpdate: -1,\n  _boundingSphereChanged: false\n});\n\n// Define onBeforeRender/onAfterRender event handler properties\nFacade.defineEventProperty(Object3DFacade, 'onBeforeRender', 'beforerender');\nFacade.defineEventProperty(Object3DFacade, 'onAfterRender', 'afterrender');\n\nconst noop = function() {};\nconst tempRaycaster = new Raycaster();\nconst tempVec2 = new Vector2();\nconst tempVec3 = new Vector3();\nconst tempMat4 = new Matrix4();\nconst tempQuat = new Quaternion();\nconst lookAtUp = new Vector3(0, 1, 0);\n\nlet _projectionMatrixVersion = 0;\n\nfunction createCameraFacade(threeJsCameraClass, projectionProps, otherProps) {\n  class Camera3DFacade extends Object3DFacade {\n    constructor(parent) {\n      super(parent);\n      this.lookAt = this.up = null;\n      this._projectionChanged = false;\n      this._frustum = new Frustum();\n    }\n\n    initThreeObject () {\n      const camera = new threeJsCameraClass();\n      // Forcibly prevent updateMatrixWorld from doing anything when called; the renderer\n      // likes to call this even though matrixAutoUpdate=false which can sometimes clobber\n      // our optimized `updateMatrices` handling and any custom adjustments it may make.\n      // TODO consider doing this at the Object3DFacade level?\n      camera.updateMatrixWorld = noop;\n      return camera\n    }\n\n    afterUpdate() {\n      // Apply lookAt+up as a final transform - applied as individual quaternion\n      // properties so they can selectively trigger updates, be transitioned, etc.\n      if (this.lookAt) {\n        tempVec3.copy(this.lookAt);\n        lookAtUp.copy(this.up || Object3D.DefaultUp);\n        tempMat4.lookAt(this.threeObject.position, tempVec3, lookAtUp);\n        tempQuat.setFromRotationMatrix(tempMat4);\n        this.quaternionX = tempQuat.x;\n        this.quaternionY = tempQuat.y;\n        this.quaternionZ = tempQuat.z;\n        this.quaternionW = tempQuat.w;\n      }\n      super.afterUpdate();\n    }\n\n    updateMatrices() {\n      let camObj = this.threeObject;\n\n      // Projection changes require a projection matrix rebuild - see setters below\n      if (this._projectionChanged) {\n        camObj.updateProjectionMatrix();\n        this._projectionChanged = false;\n        this._projectionMatrixVersion = _projectionMatrixVersion++;\n      }\n\n      // If changing the world matrix, also update its inverse\n      let matrixVersionBeforeUpdate = this._worldMatrixVersion;\n      super.updateMatrices();\n      if (matrixVersionBeforeUpdate !== this._worldMatrixVersion) {\n        invertMatrix4(camObj.matrixWorld, camObj.matrixWorldInverse);\n      }\n    }\n\n    /**\n     * Utility method that returns a Frustum object which is initialized to match this camera's\n     * current state. This can be used for example to optimize updates to the Facade tree by\n     * avoiding work for objects that fall outside the camera's view.\n     *\n     * You can access this by calling `this.getCameraFacade().getFrustum()` from any Object3DFacade's\n     * `afterUpdate` lifecycle method or later.\n     *\n     * Be careful that this Frustum does not get modified after it is requested, as it is cached for\n     * the lifetime of the camera's current world matrix and modifiying it would result in bad state\n     * for other code requesting it within that lifetime.\n     *\n     * @return {Frustum}\n     */\n    getFrustum() {\n      this.updateMatrices();\n      let frustum = this._frustum;\n      let {_worldMatrixVersion, _projectionMatrixVersion} = this;\n      if (frustum._lastWorldMatrixVersion !== _worldMatrixVersion || frustum._lastProjMatrixVersion !== _projectionMatrixVersion) {\n        let camObj = this.threeObject;\n        let matrix = new Matrix4().multiplyMatrices(camObj.projectionMatrix, camObj.matrixWorldInverse);\n        frustum.setFromMatrix(matrix);\n        frustum._lastWorldMatrixVersion = _worldMatrixVersion;\n        frustum._lastProjMatrixVersion = _projectionMatrixVersion;\n      }\n      return frustum\n    }\n\n    /**\n     * Given a set of camera projection coordinates (u,v in the range [-1, 1]), return a `Ray`\n     * representing that line of sight in worldspace.\n     * @param {number} u\n     * @param {number} v\n     * @return Ray\n     */\n    getRayAtProjectedCoords(u, v) {\n      // By default we use the builtin Raycaster functionality, but this can be overridden\n      const ray = tempRaycaster.ray = new Ray();\n      tempRaycaster.setFromCamera(tempVec2.set(u, v), this.threeObject);\n      return ray\n    }\n  }\n\n  // Setters for properties which require a matrix update\n  function defineProp(prop, affectsProjection) {\n    Object.defineProperty(Camera3DFacade.prototype, prop, {\n      set(val) {\n        if (val !== this.threeObject[prop]) {\n          this.threeObject[prop] = val;\n          if (affectsProjection) this._projectionChanged = true;\n        }\n      },\n      get() {\n        return this.threeObject[prop]\n      }\n    });\n  }\n\n  projectionProps.forEach(prop => {\n    defineProp(prop, true);\n  });\n\n  if (otherProps) {\n    otherProps.forEach(prop => {\n      defineProp(prop, false);\n    });\n  }\n\n  return Camera3DFacade\n}\n\n\nconst PerspectiveCamera3DFacade = createCameraFacade(PerspectiveCamera, ['fov', 'aspect', 'near', 'far'], ['focus', 'filmGauge', 'filmOffset']);\nconst OrthographicCamera3DFacade = createCameraFacade(OrthographicCamera, ['left', 'right', 'top', 'bottom', 'near', 'far']);\n\nclass Group3DFacade extends Object3DFacade {\n  initThreeObject() {\n    let group = new Group();\n    group.isRenderable = false; //trigger optimizations\n    return group\n  }\n}\n\n/**\n * Defines a snippet of HTML content that will be positioned to line up with the object's\n * xyz as projected by the scene's camera. This is a convenient way to display tooltips,\n * labels, and pieces of UI that follow a given object around.\n */\nclass HtmlOverlay3DFacade extends Object3DFacade {\n  constructor(parent) {\n    let obj = new Object3D();\n    obj.isRenderable = false; //trigger optimizations\n    super(parent, obj);\n\n    /**\n     * Defines the HTML content to be rendered. The type/format of this value is dependent\n     * on the wrapping implementation; for example the Canvas3D.js React-based wrapper will\n     * expect a React element descriptor, while other wrappers might expect a HTML string.\n     *\n     * When using the React-based wrapper, the rendered React component will not be updated\n     * when the overlay is repositioned, unless (a) the `html` element descriptor changes, or\n     * (b) that element descriptor has a `shouldUpdateOnMove` prop.\n     */\n    this.html = null;\n\n    /**\n     * If set to true, the overlay's x/y position on screen will not be rounded to whole-pixel\n     * values. This can give more accurate alignment at the expense of fuzzy lines and text.\n     */\n    this.exact = false;\n\n    this.notifyWorld('addHtmlOverlay', this);\n  }\n\n  destructor() {\n    this.notifyWorld('removeHtmlOverlay', this);\n    super.destructor();\n  }\n}\n\n//import {ShadowMapViewer} from 'three/examples/jsm/utils/ShadowMapViewer.js'\n\n\n// Common superclass with setters for all possible light properties\nclass Light3DFacade extends Object3DFacade {\n  set color(c) {\n    this.threeObject.color.set(c);\n  }\n  get color() {\n    return this.threeObject.color.getHex()\n  }\n\n  // Shadow map configurable by deep object copy:\n  get shadow() {\n    return this.threeObject.shadow\n  }\n  set shadow(val) {\n    utils.assignDeep(this.threeObject.shadow, val);\n  }\n}\n// Setters for simple properties to be copied\n['intensity', 'distance', 'angle', 'penumbra', 'decay', 'castShadow', 'width', 'height'].forEach(propName => {\n  Object.defineProperty(Light3DFacade.prototype, propName, {\n    get() {\n      return this.threeObject[propName]\n    },\n    set(value) {\n      this.threeObject[propName] = value;\n    }\n  });\n});\n\n\nfunction createLightFacade(ThreeJsLightClass, HelperClass, customProtoDefs) {\n  const Cls = class extends Light3DFacade {\n    initThreeObject() {\n      return new ThreeJsLightClass()\n    }\n    set showHelper(showHelper) {\n      let helper = this._helper;\n      if (!!showHelper !== !!helper) {\n        if (showHelper) {\n          this.threeObject.add(this._helper = new HelperClass(this.threeObject));\n        } else if (helper) {\n          helper.dispose();\n          this.threeObject.remove(helper);\n          this._helper = null;\n        }\n      }\n    }\n    afterUpdate () {\n      super.afterUpdate();\n      if (this._helper) {\n        this._helper.update();\n      }\n    }\n  };\n  if (customProtoDefs) {\n    Object.defineProperties(Cls.prototype, customProtoDefs);\n  }\n  return Cls\n}\n\nconst AmbientLight3DFacade = createLightFacade(AmbientLight);\nconst DirectionalLight3DFacade = createLightFacade(DirectionalLight, DirectionalLightHelper);\nconst SpotLight3DFacade = createLightFacade(SpotLight, SpotLightHelper);\nconst PointLight3DFacade = createLightFacade(PointLight, PointLightHelper);\nconst HemisphereLight3DFacade = createLightFacade(HemisphereLight, HemisphereLightHelper, {\n  groundColor: {\n    set(c) {\n      this.threeObject.groundColor.set(c);\n    },\n    get() {\n      return this.threeObject.groundColor.getHex()\n    }\n  }\n});\nconst RectAreaLight3DFacade = createLightFacade(RectAreaLight);\n\nconst inverseFunction = `\n#if __VERSION__ < 300\n// matrix inversion utility for pre-ES3 - credit https://github.com/stackgl/glsl-inverse\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(\n    b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n    b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n    b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)\n  ) / det;\n}\n#endif\n`;\n\nconst vertexCommonDefs = `\nattribute vec4 troika_modelMatrixRow0;\nattribute vec4 troika_modelMatrixRow1;\nattribute vec4 troika_modelMatrixRow2;\nmat4 troika_modelMatrix;\nmat4 troika_modelViewMatrix;\nmat3 troika_normalMatrix;\n`;\n\nconst modelMatrixVarAssignment = `\ntroika_modelMatrix = mat4(\n  %0.x, %1.x, %2.x, 0.0,\n  %0.y, %1.y, %2.y, 0.0,\n  %0.z, %1.z, %2.z, 0.0,\n  %0.w, %1.w, %2.w, 1.0\n);\n`.replace(/%/g, 'troika_modelMatrixRow');\n\nconst modelViewMatrixVarAssignment = `\ntroika_modelViewMatrix = viewMatrix * troika_modelMatrix;\n`;\n\nconst normalMatrixVarAssignment = `\ntroika_normalMatrix = transposeMat3(inverse(mat3(troika_modelViewMatrix)));\n`;\n\n\nconst modelMatrixRefRE = /\\bmodelMatrix\\b/g;\nconst modelViewMatrixRefRE = /\\bmodelViewMatrix\\b/g;\nconst normalMatrixRefRE = /\\bnormalMatrix\\b/g;\nconst precededByUniformRE = /\\buniform\\s+(int|float|vec[234])\\s+$/;\nconst attrRefReplacer = (name, index, str) => precededByUniformRE.test(str.substr(0, index)) ? name : `troika_${name}`;\nconst varyingRefReplacer = (name, index, str) => precededByUniformRE.test(str.substr(0, index)) ? name : `troika_vary_${name}`;\n\nconst CACHE = new WeakMap();\n\n/**\n * Get a derived material with instancing upgrades for the given base material.\n * The result is cached by baseMaterial+instanceUniforms so we always get the same instance\n * back rather than getting a clone each time and having to re-upgrade every frame.\n */\nfunction getInstancingDerivedMaterial(baseMaterial, instanceUniforms) {\n  let instanceUniformsKey = instanceUniforms ? instanceUniforms.sort().join('|') : '';\n  let derived = CACHE.get(baseMaterial);\n  if (!derived || derived._instanceUniformsKey !== instanceUniformsKey) {\n    derived = createDerivedMaterial(baseMaterial, {\n      defines: {\n        TROIKA_INSTANCED_UNIFORMS: instanceUniformsKey\n      },\n      customRewriter({vertexShader, fragmentShader}) {\n        return upgradeShaders(vertexShader, fragmentShader, instanceUniforms)\n      }\n    });\n    derived._instanceUniformsKey = instanceUniformsKey;\n    CACHE.set(baseMaterial, derived);\n  }\n  return derived\n}\n\n\n/**\n * Transform the given vertex and fragment shader pair so they accept instancing\n * attributes for the builtin matrix uniforms as well as any other uniforms that\n * have been declared as instanceable.\n */\nfunction upgradeShaders(vertexShader, fragmentShader, instanceUniforms) {\n  // See what gets used\n  let usesModelMatrix = modelMatrixRefRE.test(vertexShader);\n  let usesModelViewMatrix = modelViewMatrixRefRE.test(vertexShader);\n  let usesNormalMatrix = normalMatrixRefRE.test(vertexShader);\n\n  // Find what uniforms are declared in which shader and their types\n  let vertexUniforms = getShaderUniformTypes(vertexShader);\n  let fragmentUniforms = getShaderUniformTypes(fragmentShader);\n\n  let vertexDeclarations = [vertexCommonDefs];\n  let vertexAssignments = [];\n  let fragmentDeclarations = [];\n\n  // Add variable assignments for, and rewrite references to, builtin matrices\n  if (usesModelMatrix || usesModelViewMatrix || usesNormalMatrix) {\n    vertexShader = vertexShader.replace(modelMatrixRefRE, attrRefReplacer);\n    vertexAssignments.push(modelMatrixVarAssignment);\n  }\n  if (usesModelViewMatrix || usesNormalMatrix) {\n    vertexShader = vertexShader.replace(modelViewMatrixRefRE, attrRefReplacer);\n    vertexAssignments.push(modelViewMatrixVarAssignment);\n  }\n  if (usesNormalMatrix) {\n    vertexShader = vertexShader.replace(normalMatrixRefRE, attrRefReplacer);\n    vertexAssignments.push(normalMatrixVarAssignment);\n    // Add the inverse() glsl polyfill if there isn't already one defined\n    if (!/\\binverse\\s*\\(/.test(vertexShader)) {\n      vertexDeclarations.push(inverseFunction);\n    }\n  }\n\n  // Add attributes and varyings for, and rewrite references to, instanceUniforms\n  if (instanceUniforms) {\n    instanceUniforms.forEach(name => {\n      let vertType = vertexUniforms[name];\n      let fragType = fragmentUniforms[name];\n      if (vertType || fragType) {\n        let finder = new RegExp(`\\\\b${name}\\\\b`, 'g');\n        vertexDeclarations.push(`attribute ${vertType || fragType} troika_${name};`);\n        if (vertType) {\n          vertexShader = vertexShader.replace(finder, attrRefReplacer);\n        }\n        if (fragType) {\n          fragmentShader = fragmentShader.replace(finder, varyingRefReplacer);\n          let varyingDecl = `varying ${fragType} troika_vary_${name};`;\n          vertexDeclarations.push(varyingDecl);\n          fragmentDeclarations.push(varyingDecl);\n          vertexAssignments.push(`troika_vary_${name} = troika_${name};`);\n        }\n      }\n    });\n  }\n\n  // Inject vertex shader declarations and assignments\n  vertexShader = `\n${vertexDeclarations.join('\\n')}\n${vertexShader.replace(voidMainRegExp, `\n  $&\n  ${ vertexAssignments.join('\\n') }\n`)}`;\n\n  // Inject fragment shader declarations\n  if (fragmentDeclarations.length) {\n    fragmentShader = `\n${fragmentDeclarations.join('\\n')}\n${fragmentShader}`;\n  }\n\n  return {vertexShader, fragmentShader}\n}\n\nconst { assign: assign$1 } = utils;\n\nconst INSTANCE_BATCH_SIZE = 128; //TODO make this an option?\nconst DYNAMIC_DRAW = 0x88E8; //can't import DynamicDrawUsage from three without breaking older versions\n\n/**\n * An InstancingManager handles aggregating all Instanceable3DFacade descendants into\n * instancing batches. For each batch it creates a clone of the instancedThreeObject,\n * populates a pooled InstancedBufferGeometry with buffer attributes holding the world\n * matrices of all the batch's instances, and temporarily inserts that into the\n * scene to be rendered.\n *\n * As an additional \"turbo\" optimization, the instancing batch objects/geometries will be\n * reused untouched between rendering frames if none of the managed Instanceable3DFacade\n * objects have changed in a way that would affect the batches or world matrix attributes.\n *\n * There is a global InstancingManager automatically added to the main scene, and it does\n * nothing if there are no Instanceable3DFacades in the scene, so in most cases you should\n * not need to touch this yourself. But it is also possible to insert additional\n * InstancingManager facades further down in the scene if you wish to control the scope\n * of instancing, e.g. to increase the likelihood of the aforementioned \"turbo\" optimization\n * kicking in.\n *\n * Also see InstancingShaderUpgrades, which modifies material shaders so they accept the matrix\n * and custom uniform values coming in as attributes. This allows built-in materials as well\n * as custom shaders to work with instancing without manual modification.\n */\nclass InstancingManager extends Group3DFacade {\n  constructor(parent) {\n    super(parent);\n    this._instanceables = Object.create(null);\n    this._batchGeometryPool = new BatchGeometryPool();\n    this._needsRebatch = true;\n    this.addEventListener('beforerender', this._setupBatchObjects.bind(this));\n    this.addEventListener('afterrender', this._teardownBatchObjects.bind(this));\n  }\n\n  onNotifyWorld(source, message, data) {\n    let handler = this._notifyWorldHandlers[message];\n    if (handler) {\n      handler.call(this, source, data);\n    } else if (this.parent) {\n      this.parent.onNotifyWorld(source, message, data);\n    }\n  }\n\n  _setupBatchObjects(renderer, scene, camera) {\n    let instanceables = this._instanceables;\n    let batchObjectsByKey = this._batchObjectsByKey;\n    let needsRebatch = this._needsRebatch;\n\n    if (!needsRebatch) {\n      // We'll already know about most types of changes (instanceable addition/removal, instancedThreeObject\n      // changes, matrix changes) but if any of the instancedThreeObjects changed their geometry or material\n      // internally we'll need to detect that here and deoptimize.\n      for (let key in batchObjectsByKey) {\n        let batchObj = batchObjectsByKey[key][0];\n        if (this._getBatchKey(batchObj.$troikaBatchBaseObj) !== key) {\n          needsRebatch = true;\n          break\n        }\n      }\n    }\n\n    if (needsRebatch) {\n      batchObjectsByKey = this._batchObjectsByKey = Object.create(null);\n      let geometryPool = this._batchGeometryPool;\n      for (let facadeId in instanceables) {\n        let facade = instanceables[facadeId];\n        let instanceObject = facade.threeObject;\n        let protoObject = facade.instancedThreeObject;\n\n        if (protoObject && instanceObject.visible) {\n          // Find or create the batch object for this facade's instancedThreeObject\n          let batchKey = this._getBatchKey(protoObject);\n          let instanceUniforms = this._getInstanceUniformNames(protoObject);\n          let batchObjects = batchObjectsByKey[batchKey] || (batchObjectsByKey[batchKey] = []);\n          let batchObject = batchObjects[batchObjects.length - 1];\n          let batchGeometry = batchObject && batchObject.geometry;\n          if (!batchGeometry || getInstanceCount(batchGeometry) === INSTANCE_BATCH_SIZE) {\n            batchObject = this._getBatchObject(protoObject);\n            batchGeometry = batchObject.geometry;\n            let attrs = batchGeometry._instanceAttrs.matrix;\n            for (let row = 0; row < 3; row++) {\n              attrs[row].version++;\n            }\n            if (instanceUniforms) {\n              attrs = batchGeometry._instanceAttrs.uniforms;\n              for (let i = instanceUniforms.length; i--;) {\n                attrs[instanceUniforms[i]].version++;\n              }\n            }\n            batchObjects.push(batchObject);\n          }\n\n          // Put the instance's world matrix into the batch geometry's instancing attributes\n          let attrOffset = getInstanceCount(batchGeometry);\n          setInstanceCount(batchGeometry, attrOffset + 1);\n          let attrs = batchGeometry._instanceAttrs.matrix;\n          let elements = instanceObject.matrixWorld.elements; //column order\n          attrs[0].setXYZW(attrOffset, elements[0], elements[4], elements[8], elements[12]);\n          attrs[1].setXYZW(attrOffset, elements[1], elements[5], elements[9], elements[13]);\n          attrs[2].setXYZW(attrOffset, elements[2], elements[6], elements[10], elements[14]);\n\n          // Put the instance's values for instanceUniforms into the corresponding attributes\n          if (instanceUniforms) {\n            attrs = batchGeometry._instanceAttrs.uniforms;\n            for (let i = instanceUniforms.length; i--;) {\n              let uniform = instanceUniforms[i];\n              let attr = attrs[uniform];\n              let facadeUniforms = facade._instanceUniforms;\n              let value = facadeUniforms && (uniform in facadeUniforms) ?\n                facadeUniforms[uniform] : getDefaultUniformValue(protoObject.material, uniform);\n              setAttributeValue(attr, attrOffset, value);\n            }\n          }\n\n          // Save pointers for possible reuse next frame\n          facade._instancingBatchObject = batchObject;\n          facade._instancingBatchAttrOffset = attrOffset;\n        } else {\n          facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;\n        }\n      }\n\n      // Dispose any old batch geometries that were unused during this render pass\n      // TODO should this be delayed any to prevent thrashing?\n      geometryPool.disposeUnused();\n    }\n\n    // Add the batch objects to the scene\n    let batchCount = 0;\n    let batchGrpCount = 0;\n    let instanceCount = 0;\n    for (let id in batchObjectsByKey) {\n      let batchObjects = batchObjectsByKey[id];\n      scene.children.push.apply(scene.children, batchObjects);\n\n      // increment stats\n      batchGrpCount++;\n      for (let i = batchObjects.length; i--;) {\n        batchCount++;\n        instanceCount += getInstanceCount(batchObjects[i].geometry);\n      }\n    }\n\n    this.notifyWorld('statsUpdate', {\n      'Instancing Batch Groups': batchGrpCount,\n      'Instancing Batches': batchCount,\n      'Instanced Objects': instanceCount\n    });\n\n    this._needsRebatch = false;\n  }\n\n  _onInstanceAdded(facade) {\n    this._instanceables[facade.$facadeId] = facade;\n    this._needsRebatch = true;\n  }\n\n  _onInstanceRemoved(facade) {\n    delete this._instanceables[facade.$facadeId];\n    this._needsRebatch = true;\n  }\n\n  _onInstanceChanged(facade) {\n    this._needsRebatch = true;\n  }\n\n  _onInstanceMatrixChanged(facade) {\n    // If a single instance's matrix changed and the batches are still otherwise valid, avoid a\n    // full rebatch by updating just this instance's values in the matrix attributes directly.\n    if (!this._needsRebatch) {\n      let protoObject = facade.instancedThreeObject;\n      let batchObject = facade._instancingBatchObject;\n      let attrOffset = facade._instancingBatchAttrOffset;\n      if (protoObject && batchObject && this._getBatchKey(protoObject) === this._getBatchKey(batchObject)) {\n        let attrs = batchObject.geometry._instanceAttrs.matrix;\n        let elements = facade.threeObject.matrixWorld.elements;\n        attrs[0].setXYZW(attrOffset, elements[0], elements[4], elements[8], elements[12]).version++;\n        attrs[1].setXYZW(attrOffset, elements[1], elements[5], elements[9], elements[13]).version++;\n        attrs[2].setXYZW(attrOffset, elements[2], elements[6], elements[10], elements[14]).version++;\n      } else {\n        // Fallback just in case something didn't line up above - clear pointers and trigger rebatch\n        facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;\n        this._needsRebatch = true;\n      }\n    }\n  }\n\n  _onInstanceUniformChanged(facade, uniformName) {\n    if (!this._needsRebatch) {\n      let protoObject = facade.instancedThreeObject;\n      let batchObject = facade._instancingBatchObject;\n      let attr;\n      if (protoObject && batchObject && this._getBatchKey(protoObject) === this._getBatchKey(batchObject)\n        && (attr = batchObject.geometry._instanceAttrs.uniforms[uniformName])) {\n        setAttributeValue(attr, facade._instancingBatchAttrOffset, facade._instanceUniforms[uniformName]);\n        attr.version++; //skip setter\n      } else {\n        // Fallback just in case something didn't line up above - clear pointers and trigger rebatch\n        facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;\n        this._needsRebatch = true;\n      }\n    }\n  }\n\n  _getBatchKey(object) {\n    let cache = this._batchKeysCache || (this._batchKeysCache = Object.create(null)); //cache results for duration of this frame\n    let key = cache && cache[object.id];\n    if (!key) {\n      let uniforms = this._getInstanceUniformNames(object);\n      key = `${object.geometry.id}|${object.material.id}|${uniforms ? uniforms.sort().join(',') : ''}`;\n      cache[object.id] = key;\n    }\n    return key\n  }\n\n  _getInstanceUniformNames(object) {\n    let namesSet = object._instanceUniformNames;\n    if (!namesSet) return null\n    let cache = this._uniformNamesCache || (this._uniformNamesCache = new Map());\n    let namesArray = cache.get(namesSet);\n    if (!namesArray) {\n      namesArray = Array.from(namesSet);\n      cache.set(namesSet, namesArray);\n    }\n    return namesArray\n  }\n\n  _getInstanceUniformSizes(material, uniformNames) {\n    // Cache results per material for duration of this frame\n    let cache = this._uniformSizesCache || (this._uniformSizesCache = new Map());\n    let result = cache.get(material);\n    if (!result) {\n      result = Object.create(null);\n      if (uniformNames) {\n        uniformNames.forEach(name => {\n          let size = getUniformItemSize(material, name);\n          if (size > 0) {\n            result[name] = size;\n          } else {\n            console.warn(`Could not determine item size for uniform ${name}`);\n          }\n        });\n      }\n      cache.set(material, result);\n    }\n    return result\n  }\n\n  _getBatchObject(instancedObject) {\n    let {geometry, material} = instancedObject;\n\n    // Upgrade the geometry to an instanced one\n    if (!geometry.isBufferGeometry) {\n      throw new Error('Instanceable proto object must use a BufferGeometry')\n    }\n    let batchKey = this._getBatchKey(instancedObject);\n    let uniformNames = this._getInstanceUniformNames(instancedObject);\n    let uniformSizes = this._getInstanceUniformSizes(material, uniformNames);\n    let batchGeometry = this._batchGeometryPool.borrow(batchKey, geometry, uniformSizes);\n    setInstanceCount(batchGeometry, 0);\n\n    // Upgrade the material to one with the shader modifications for instancing\n    let batchMaterial = getInstancingDerivedMaterial(material, uniformNames);\n    let depthMaterial, distanceMaterial;\n\n    // Create a new mesh object to hold it all\n    let batchObject = Object.create(instancedObject, {\n      // Redefine properties rather than setting them so we don't inadvertently trigger setters on\n      // the base object:\n      geometry: { value: batchGeometry },\n      material: { value: batchMaterial },\n      visible: { value: true },\n      frustumCulled: { value: false },\n\n      // Lazy getters for shadow materials:\n      customDepthMaterial: {\n        get() {\n          if (!depthMaterial) {\n            depthMaterial = batchMaterial.getDepthMaterial();\n            // We need to trick WebGLRenderer into setting the `viewMatrix` uniform, which it doesn't\n            // normally do for MeshDepthMaterial but it's needed by the instancing shader code. It does\n            // for ShaderMaterials so we pretend to be one.\n            depthMaterial.isShaderMaterial = true;\n            depthMaterial.uniformsGroups = depthMaterial.uniformsGroups || [];\n          }\n          return depthMaterial\n        }\n      },\n      customDistanceMaterial: {\n        get() {\n          if (!distanceMaterial) {\n            distanceMaterial = batchMaterial.getDistanceMaterial();\n            // We need to trick WebGLRenderer into setting the `viewMatrix` uniform, which it doesn't\n            // normally do for MeshDistanceMaterial but it's needed by the instancing shader code. It does\n            // for ShaderMaterials so we pretend to be one.\n            distanceMaterial.isShaderMaterial = true;\n            distanceMaterial.uniformsGroups = distanceMaterial.uniformsGroups || [];\n\n            // Additionally, WebGLShadowMap.render() rotates a single camera 6 times per object, which fails\n            // to trigger the code in WebGLRenderer.setProgram() that updates the viewMatrix uniform for\n            // directions 2 through 6. Since we need a correct viewMatrix in the instancing shader code,\n            // we hack it by defining our own viewMatrix uniform on the distance material and manually\n            // updating it before each view of the distance cube is rendered. Unfortunately intercepting the\n            // view changes in a way that has access to the shadow camera's viewMatrix has proven quite\n            // difficult; the least-awful way I've found is to monkeypatch the `modelViewMatrix.multiplyMatrices()`\n            // function which is always called - see (*!) below.\n            distanceMaterial.uniforms = assign$1({\n              viewMatrix: { value: new Matrix4() }\n            }, distanceMaterial.uniforms);\n          }\n          return distanceMaterial\n        }\n      },\n      // (*!) Hack for updating viewMatrix uniform on the distance material - see explanation above.\n      modelViewMatrix: {\n        value: function() {\n          const modelViewMatrix = new Matrix4();\n          modelViewMatrix.multiplyMatrices = function(viewMatrix, matrixWorld) {\n            if (distanceMaterial) {\n              distanceMaterial.uniforms.viewMatrix.value.copy(viewMatrix);\n              distanceMaterial.uniformsNeedUpdate = true; //undocumented flag for ShaderMaterial\n            }\n            return Matrix4.prototype.multiplyMatrices.call(this, viewMatrix, matrixWorld)\n          };\n          return modelViewMatrix\n        }()\n      }\n    });\n    batchObject.$troikaBatchBaseObj = instancedObject;\n    batchObject.$troikaInstancingManager = this;\n    // NOTE other props are inherited so don't need to copy them\n    return batchObject\n  }\n\n  _teardownBatchObjects(renderer, scene, camera) {\n    // Release geometries to the pool for next time\n    this._batchGeometryPool.releaseAll();\n\n    // Clear caches from this render frame\n    this._batchKeysCache = null;\n    this._uniformNamesCache = null;\n    this._uniformSizesCache = null;\n\n    // Remove batch objects from scene\n    scene.children = scene.children.filter(obj => obj.$troikaInstancingManager !== this);\n  }\n\n  destructor() {\n    let pool = this._batchGeometryPool;\n    pool.releaseAll();\n    pool.disposeUnused();\n    super.destructor();\n  }\n}\n\n\n/**\n * Pool for the instancing batch geometries\n */\nclass BatchGeometryPool {\n  constructor() {\n    this._poolsByKey = Object.create(null);\n  }\n\n  borrow(key, baseGeometry, instanceUniformSizes) {\n    let poolsByKey = this._poolsByKey;\n    let pool = poolsByKey[key] || (poolsByKey[key] = {geometries: [], firstFree: 0});\n    let batchGeometry = pool.geometries[pool.firstFree++];\n\n    if (!batchGeometry) {\n      batchGeometry = new InstancedBufferGeometry();\n      assign$1(batchGeometry, baseGeometry);\n      batchGeometry.attributes = assign$1({}, baseGeometry.attributes);\n      let instanceAttrs = batchGeometry._instanceAttrs = {matrix: [], uniforms: Object.create(null)}; //separate collections for quicker lookup\n\n      // Create instancing attributes for the modelMatrix's rows\n      for (let row = 0; row < 3; row++) {\n        let attr = new InstancedBufferAttribute(new Float32Array(INSTANCE_BATCH_SIZE * 4), 4);\n        if (attr.setUsage) {\n          attr.setUsage(DYNAMIC_DRAW);\n        } else {\n          attr.dynamic = true;\n        }\n        batchGeometry.attributes[`troika_modelMatrixRow${row}`] = attr;\n        instanceAttrs.matrix[row] = attr;\n      }\n\n      // Create instancing attributes for the instanceUniforms\n      for (let name in instanceUniformSizes) {\n        let itemSize = instanceUniformSizes[name];\n        let attr = new InstancedBufferAttribute(new Float32Array(INSTANCE_BATCH_SIZE * itemSize), itemSize);\n        if (attr.setUsage) {\n          attr.setUsage(DYNAMIC_DRAW);\n        } else {\n          attr.dynamic = true;\n        }\n        batchGeometry.attributes[`troika_${name}`] = attr;\n        instanceAttrs.uniforms[name] = attr;\n      }\n\n      pool.geometries.push(batchGeometry);\n    }\n\n    return batchGeometry\n  }\n\n  releaseAll() {\n    let pools = this._poolsByKey;\n    if (pools) {\n      for (let key in pools) {\n        pools[key].firstFree = 0;\n      }\n    }\n  }\n\n  disposeUnused() {\n    let pools = this._poolsByKey;\n    if (pools) {\n      for (let key in pools) {\n        let {firstFree, geometries} = pools[key];\n        for (let i = firstFree, len = geometries.length; i < len; i++) {\n          // Only allow the instancing attributes to be disposed; those copied from the\n          // original geometry will be up to the author to dispose of properly\n          let attrs = geometries[i].attributes;\n          for (let attrName in attrs) {\n            if (attrs.hasOwnProperty(attrName) && attrName.indexOf('troika_') !== 0) {\n              delete attrs[attrName];\n            }\n          }\n          try {\n            // can throw if it's already been disposed or hasn't yet been rendered\n            geometries[i].dispose();\n          } catch(e) { /* empty */ }\n          geometries[i]._instanceAttrs = null;\n        }\n        geometries.length = firstFree;\n      }\n    }\n  }\n}\n\n\nconst proto = InstancingManager.prototype;\nproto._notifyWorldHandlers = {\n  instanceableAdded: proto._onInstanceAdded,\n  instanceableRemoved: proto._onInstanceRemoved,\n  instanceableChanged: proto._onInstanceChanged,\n  instanceableMatrixChanged: proto._onInstanceMatrixChanged,\n  instanceableUniformChanged: proto._onInstanceUniformChanged\n};\n\n\nfunction setAttributeValue(attr, offset, value) {\n  let size = attr.itemSize;\n  if (size === 1) {\n    attr.setX(offset, value);\n  }\n  else if (size === 2) {\n    attr.setXY(offset, value.x, value.y);\n  }\n  else if (size === 3) {\n    if (value.isColor) {\n      attr.setXYZ(offset, value.r, value.g, value.b);\n    } else {\n      attr.setXYZ(offset, value.x, value.y, value.z);\n    }\n  } else if (size === 4) {\n    attr.setXYZW(offset, value.x, value.y, value.z, value.w);\n  }\n}\n\nfunction getDefaultUniformValue(material, name) {\n  // Try uniforms on the material itself, then try the builtin material shaders\n  let uniforms = material.uniforms;\n  if (uniforms && uniforms[name]) {\n    return uniforms[name].value\n  }\n  uniforms = getShadersForMaterial(material).uniforms;\n  if (uniforms && uniforms[name]) {\n    return uniforms[name].value\n  }\n  return null\n}\n\nfunction getUniformItemSize(material, name) {\n  return getItemSizeForValue(getDefaultUniformValue(material, name))\n}\n\nfunction getItemSizeForValue(value) {\n  return value == null ? 0\n    : typeof value === 'number' ? 1\n    : value.isVector2 ? 2\n    : (value.isVector3 || value.isColor) ? 3\n    : value.isVector4 ? 4\n    : Array.isArray(value) ? value.length\n    : 0\n}\n\n// Handle maxInstancedCount -> instanceCount rename that happened in three r117\nfunction getInstanceCount(geom) {\n  return geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount']\n}\nfunction setInstanceCount(geom, count) {\n  geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;\n}\n\nconst LIGHT_TYPES = {\n  ambient: AmbientLight3DFacade,\n  directional: DirectionalLight3DFacade,\n  spot: SpotLight3DFacade,\n  point: PointLight3DFacade,\n  hemisphere: HemisphereLight3DFacade\n};\n\nconst RAY_INTERSECTION = [{distance: Infinity}];\nconst INFINITE_SPHERE = new Sphere(undefined, Infinity);\nconst tempArr = [null];\n\nclass Scene3DFacade extends Object3DFacade {\n  initThreeObject() {\n    const scene = new Scene();\n    // We always manually update world matrices when needed - see Object3DFacade.updateMatrices() -\n    // so the additional auto-update pass done by threejs before render is not needed.\n    // The flag was renamed autoUpdate->matrixWorldAutoUpdate in r144\n    if ('matrixWorldAutoUpdate' in scene) {\n      scene.matrixWorldAutoUpdate = false;\n    } else {\n      scene.autoUpdate = false;\n    }\n    return scene\n  }\n\n  afterUpdate () {\n    let scene = this.threeObject;\n    scene.background = this.background || null;\n    scene.environment = this.environment || null;\n    super.afterUpdate();\n  }\n\n  describeChildren() {\n    // Add root instancing manager\n    let children = {\n      key: 'instancingMgr',\n      facade: InstancingManager,\n      children: this.objects\n    };\n\n    // Map light definitions to their appropriate classes\n    let {lights} = this;\n    if (lights) {\n      children = [children];\n      if (!Array.isArray(lights)) {\n        tempArr[0] = lights;\n        lights = tempArr;\n      }\n      lights.forEach((def, i) => {\n        let facade = def.facade || LIGHT_TYPES[def.type];\n        if (typeof facade === 'function') {\n          let realDef = utils.assign({}, def);\n          delete realDef.type;\n          realDef.key = def.key || `light${ i }`;\n          realDef.facade = facade;\n          children.push(realDef);\n        }\n      });\n    }\n\n    return children\n  }\n\n  set fog(def) {\n    let fogObj = this._fogObj;\n    if (def) {\n      let isExp2 = 'density' in def;\n      let fogClass = isExp2 ? FogExp2 : Fog;\n      if (!fogObj || !(fogObj instanceof fogClass)) {\n        fogObj = this._fogObj = new fogClass();\n      }\n      fogObj.color.set(def.color);\n      if (isExp2) {\n        fogObj.density = def.density;\n      } else {\n        fogObj.near = def.near;\n        fogObj.far = def.far;\n      }\n    } else {\n      fogObj = this._fogObj = null;\n    }\n    this.threeObject.fog = fogObj;\n  }\n\n  getBoundingSphere() {\n    return INFINITE_SPHERE\n  }\n\n  raycast(raycaster) {\n    // Scene3DFacade will always intersect, but as the furthest from the camera\n    return RAY_INTERSECTION\n  }\n}\n\nconst { assign: assign$2, forOwn: forOwn$1 } = utils;\nconst tempSphere = new Sphere();\nconst SQRT3 = Math.sqrt(3);\nconst PRECISION = 1e-8;\n\n\nclass BoundingSphereOctree {\n  constructor() {\n    this.root = null;\n    this.keysToLeaves = Object.create(null);\n  }\n\n  putSpheres(spheres) {\n    forOwn$1(spheres, (sphere, key) => {\n      this.putSphere(key, sphere);\n    });\n  }\n\n  putSphere(key, sphere) {\n    const {center, radius} = sphere;\n\n    // Sanity check\n    if (!sphere || isNaN(radius) || isNaN(center.x)) {\n      console.warn('Invalid sphere', sphere);\n      return\n    }\n\n    // To prevent excessively deep trees when spheres are very close together, apply a rounding\n    // precision below which spheres will be treated as coincident and stored in the same leaf.\n    center._roundedX = Math.round(center.x / PRECISION) * PRECISION;\n    center._roundedY = Math.round(center.y / PRECISION) * PRECISION;\n    center._roundedZ = Math.round(center.z / PRECISION) * PRECISION;\n\n    this._putSphere(key, sphere);\n  }\n\n  _putSphere(key, sphere) {\n    const {center} = sphere;\n    const {root} = this;\n    let {_roundedX, _roundedY, _roundedZ} = center;\n\n    // If we already have a sphere for this key, perform an update\n    if (key in this.keysToLeaves) {\n      return this._updateSphere(key, sphere)\n    }\n\n    // First sphere being added: create a leaf octant and set it as the root. This will be replaced as\n    // soon as a second item is added, so we can start with an initial root bounding cube that matches\n    // our actual dataset rather than an arbitrary one.\n    if (!root) {\n      const newRoot = new Octant();\n      newRoot.isLeaf = true;\n      newRoot.addSphereData(key, sphere);\n      this.root = newRoot;\n      this.keysToLeaves[key] = newRoot;\n    }\n\n    // Second sphere being added:\n    else if (root.isLeaf) {\n      const oldRoot = this.root;\n      const {dataX, dataY, dataZ} = root;\n\n      // Handle special case where the second sphere has the same center point as the first, we still\n      // can't determine good starting bounds so just append to the existing leaf\n      if (dataX === _roundedX && dataY === _roundedY && dataZ === _roundedZ) {\n        this._insertIntoOctant(key, sphere, root);\n      }\n      // Non-coincident: we can now choose an appropriate size for the root node's box. Overwrite the\n      // root with a new branch octant, and set its position/size to the smallest whole-integer cube\n      // that contains both sphere centerpoints. (Cube rounded to whole ints to avoid floating point issues)\n      else {\n        const newRoot = new Octant();\n        const cx = newRoot.cx = Math.round((dataX + _roundedX) / 2);\n        const cy = newRoot.cy = Math.round((dataY + _roundedY) / 2);\n        const cz = newRoot.cz = Math.round((dataZ + _roundedZ) / 2);\n        newRoot.cr = Math.ceil(Math.max(Math.abs(cx - dataX), Math.abs(cy - dataY), Math.abs(cz - dataZ)) + 1e-5);\n        this.root = newRoot;\n\n        // Re-add the original leaf's sphere(s) and the new sphere under the new branch root, and exit\n        oldRoot.forEachLeafSphere((_sphere, _key) => this._insertIntoOctant(_key, _sphere, newRoot));\n        this._insertIntoOctant(key, sphere, newRoot);\n      }\n    }\n\n    // Expand the root to cover the new centerpoint if necessary, and insert the sphere within it\n    else {\n      this._expandToCoverPoint(_roundedX, _roundedY, _roundedZ);\n      this._insertIntoOctant(key, sphere, this.root);\n    }\n  }\n\n  _expandToCoverPoint(x, y, z) {\n    // Loop until the root cube contains the new point...\n    while (!this.root.containsPoint(x, y, z)) {\n      // Create a larger branch, expanded by 2x in the corner direction closest to the new point\n      const oldRoot = this.root;\n      const {cx, cy, cz, cr} = oldRoot;\n      const newRoot = new Octant();\n      newRoot.maxRadius = oldRoot.maxRadius;\n      newRoot.sphereCount = oldRoot.sphereCount;\n      newRoot.leafCount = oldRoot.leafCount;\n\n      newRoot.cx = cx + cr * (x < cx ? -1 : 1);\n      newRoot.cy = cy + cr * (y < cy ? -1 : 1);\n      newRoot.cz = cz + cr * (z < cz ? -1 : 1);\n      newRoot.cr = cr * 2;\n\n      // Move the old root to be a child of the new outer box, and make the outer box the new root\n      const octantIdx = newRoot.getSubOctantIndexForPoint(cx, cy, cz);\n      oldRoot.parent = newRoot;\n      oldRoot.index = octantIdx;\n      newRoot[octantIdx] = oldRoot;\n      this.root = newRoot;\n    }\n  }\n\n  _insertIntoOctant(key, sphere, octant) {\n    const {center, radius} = sphere;\n    const {_roundedX, _roundedY, _roundedZ} = center;\n\n    // If the parent octant is a leaf:\n    if (octant.isLeaf) {\n      const {dataX, dataY, dataZ} = octant;\n\n      // If the new sphere's center matches that of the leaf, add it to the leaf's members\n      if (_roundedX === dataX && _roundedY === dataY && _roundedZ === dataZ) {\n        octant.addSphereData(key, sphere);\n\n        // Increase maxRadius up the parent tree as needed\n        for (let oct = octant.parent; oct; oct = oct.parent) {\n          if (radius > oct.maxRadius) { oct.maxRadius = radius; }\n        }\n\n        // Add to index\n        this.keysToLeaves[key] =  octant;\n      }\n\n      // Otherwise split the leaf into a branch, push the old leaf down, and try again\n      else {\n        const newBranch = _createBranchFromLeaf(octant);\n        octant.parent[octant.index] = newBranch;\n        newBranch.addOctantForPoint(octant, dataX, dataY, dataZ);\n        this._insertIntoOctant(key, sphere, newBranch); //recurse\n      }\n    }\n\n    // The parent octant is a branch:\n    else {\n      // Always increment branch's total count\n      octant.sphereCount++;\n\n      // Find the suboctant index in which the new center point falls\n      const subOctantIndex = octant.getSubOctantIndexForPoint(_roundedX, _roundedY, _roundedZ);\n\n      // If there is nothing at that index yet, insert a new leaf octant\n      let subOctant = octant[subOctantIndex];\n      if (!subOctant) {\n        const newLeaf = new Octant();\n        newLeaf.isLeaf = true;\n        octant.addOctantForPoint(newLeaf, _roundedX, _roundedY, _roundedZ);\n        newLeaf.addSphereData(key, sphere);\n\n        // Increment leafCount and maxRadius up the parent tree\n        for (let oct = newLeaf.parent; oct; oct = oct.parent) {\n          if (radius > oct.maxRadius) { oct.maxRadius = radius; }\n          oct.leafCount++;\n        }\n\n        // Add to index\n        this.keysToLeaves[key] = newLeaf;\n      }\n\n      // If there was already a sub-octant at that index, recurse\n      else {\n        return this._insertIntoOctant(key, sphere, subOctant)\n      }\n    }\n  }\n\n  removeSphere(key) {\n    // Find the existing leaf that holds the sphere\n    let leafOctant = this.keysToLeaves[key];\n    if (!leafOctant) { return }\n\n    // Preemptively decrement sphereCount up the parent tree\n    let oct = leafOctant.parent;\n    while (oct) {\n      oct.sphereCount--;\n      oct = oct.parent;\n    }\n\n    // If there are other members in the leaf, remove it from the leaf's members and keep the leaf in place\n    if (leafOctant.sphereCount > 1) {\n      // Remove sphere from the leaf data\n      leafOctant.removeSphereData(key);\n\n      // Update maxRadius up the tree\n      leafOctant.updateMaxRadii();\n    }\n\n    // It was the only member of the leaf; remove the leaf and any ancestor branches that are now empty\n    else {\n      // Walk up the tree and remove all empty branches\n      oct = leafOctant;\n      let lowestRemainingOctant;\n      do {\n        const parent = oct.parent;\n        lowestRemainingOctant = parent;\n        if (parent) {\n          parent[oct.index] = null;\n        }\n        oct = oct.parent;\n      } while (oct && oct.sphereCount === 0)\n\n      // If we got to the top of the tree, it's totally empty so set the root to null and exit\n      if (!lowestRemainingOctant) {\n        this.root = null;\n        return\n      }\n\n      // Continue up the tree, decrementing the leafCount and looking for the highest branch point with only\n      // a single remaining leaf underneath it, if any\n      let highestSingleLeafBranch = null;\n      oct = lowestRemainingOctant;\n      while (oct) {\n        oct.leafCount--;\n        if (oct.leafCount === 1) {\n          highestSingleLeafBranch = oct;\n        }\n        oct = oct.parent;\n      }\n\n      // If we were left with a branch with only one leaf descendant, move that leaf up to the branch point\n      if (highestSingleLeafBranch) {\n        let leaf = this._findSingleLeaf(highestSingleLeafBranch);\n        const parent = highestSingleLeafBranch.parent;\n        if (parent) {\n          parent.addOctantForPoint(leaf, leaf.cx, leaf.cy, leaf.cz);\n          parent.updateMaxRadii();\n        } else {\n          this.root = leaf;\n        }\n      } else {\n        // Update the max radii up the tree from the lowest remaining node\n        lowestRemainingOctant.updateMaxRadii();\n      }\n    }\n\n    // Delete it from the index\n    delete this.keysToLeaves[key];\n  }\n\n  _updateSphere(key, sphere) {\n    // Find the existing leaf octant that holds the sphere\n    let leaf = this.keysToLeaves[key];\n\n    const center = sphere.center;\n    const {_roundedX, _roundedY, _roundedZ} = center;\n\n    // If its center point still falls within the leaf's cube, we can fast-path the changes:\n    if (leaf.containsPoint(_roundedX, _roundedY, _roundedZ)) {\n      const isMulti = leaf.sphereCount > 1;\n\n      const hasMoved = _roundedX !== leaf.dataX ||\n        _roundedY !== leaf.dataY ||\n        _roundedZ !== leaf.dataZ;\n\n      // If it was not the only member and has changed position, split that leaf; we can do this\n      // slightly faster than a full remove+add because we know this will be the branch point and can\n      // avoid some unnecessary upward tree walking\n      if (isMulti && hasMoved) {\n        leaf.removeSphereData(key);\n        leaf.updateMaxRadii();\n        this._insertIntoOctant(key, sphere, leaf);\n      }\n\n      // Otherwise we can just update this leaf\n      else {\n        if (hasMoved) {\n          leaf.dataX = _roundedX;\n          leaf.dataY = _roundedY;\n          leaf.dataZ = _roundedZ;\n        }\n        if (sphere.radius !== leaf.maxRadius) {\n          leaf.updateMaxRadii();\n        }\n      }\n    }\n\n    // If its center point is no longer within the leaf, delegate to full remove+add\n    // TODO possible faster path: remove only up to lowest common ancestor branch point,\n    // collapse remaining up to that point, and insert sphere under that point\n    else {\n      this.removeSphere(key);\n      this._putSphere(key, sphere);\n    }\n  }\n\n  // Optimized utility for finding single descendant leaf without creating a function\n  _findSingleLeaf(octant) {\n    let leaf;\n    function visit(oct) {\n      if (oct.isLeaf) leaf = oct;\n    }\n    function find(oct) {\n      leaf = null;\n      this.walkBranch(oct, visit);\n      return leaf\n    }\n    this._findSingleLeaf = find; //reuse closure after first call\n    return find.call(this, octant)\n  }\n\n\n  /**\n   * Perform a depth-first walk of the tree structure, invoking a `callback` function for\n   * each node. The `callback` will be passed the current tree node object, and will be invoked\n   * for parent branch nodes first before their child nodes.\n   *\n   * If the function returns `false` for a branch node, none of that branch's children will be\n   * visited; this is how you can efficiently query the tree by filtering out the majority of branches.\n   *\n   * @param {Function} callback\n   */\n  walkTree(callback) {\n    if (this.root) {\n      this.walkBranch(this.root, callback);\n    }\n  }\n  walkBranch(root, callback) {\n    if (callback(root) !== false && !root.isLeaf) {\n      for (let i = 0; i < 8; i++) {\n        if (root[i] !== null) {\n          this.walkBranch(root[i], callback);\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Given a {@link Ray}, search the octree for any spheres that intersect that ray and invoke\n   * the given `callback` function, passing it the sphere and its key as arguments.\n   * TODO need to handle near/far\n   *\n   * @param {Ray} ray\n   * @param {Function} callback\n   * @param {Object} scope\n   */\n  forEachSphereOnRay(ray, callback, scope) {\n    return this._forEachMatchingSphere(ray.intersectsSphere.bind(ray), callback, scope)\n  }\n\n  forEachIntersectingSphere(sphere, callback, scope) {\n    return this._forEachMatchingSphere(sphere.intersectsSphere.bind(sphere), callback, scope)\n  }\n\n  _forEachMatchingSphere(testFn, callback, scope) {\n    // const startTime = performance.now()\n    // let branchTests = 0\n    // let sphereTests = 0\n    // let sphereHits = 0\n\n    function visitSphere(sphere, key) {\n      // sphereTests++\n      if (testFn(sphere)) {\n        // sphereHits++\n        callback.call(scope, sphere, key);\n      }\n    }\n\n    this.walkTree((octant) => {\n      if (octant.isLeaf) { //leaf\n        octant.forEachLeafSphere(visitSphere);\n      } else { //branch\n        // branchTests++\n        // Test using a sphere large enough to cover the maximum constituent bounding sphere with\n        // its center anywhere within the octant's box. This will obviously catch some false positives\n        // but those will be filtered at the leaf level.\n        // TODO investigate using a Box3 test, which could have fewer false positives, but only if that\n        // outweighs its slower speed (see https://jsperf.com/ray-intersectsphere-vs-intersectbox)\n        tempSphere.center.set(octant.cx, octant.cy, octant.cz);\n        tempSphere.radius = octant.cr * SQRT3 + octant.maxRadius;\n        if (!testFn(tempSphere)) {\n          return false //ignore this branch\n        }\n      }\n      return true\n    });\n\n    //console.log(`Raycast search: ${branchTests} branch tests, ${sphereTests} sphere tests, and ${sphereHits} hits, in ${performance.now() - startTime}ms`)\n  }\n}\n\n\n\n\nclass Octant {\n  containsPoint(x, y, z) {\n    const {cx, cy, cz, cr} = this;\n    return x >= cx - cr && x < cx + cr &&\n      y >= cy - cr && y < cy + cr &&\n      z >= cz - cr && z < cz + cr\n  }\n\n  getSubOctantIndexForPoint(x, y, z) {\n    return (z < this.cz ? 0 : 4) + (y < this.cy ? 0 : 2) + (x < this.cx ? 0 : 1)\n  }\n\n  addOctantForPoint(subOctant, x, y, z) {\n    const index = this.getSubOctantIndexForPoint(x, y, z);\n    const subCR = this.cr / 2;\n\n    subOctant.parent = this;\n    subOctant.index = index;\n    subOctant.cx = this.cx + subCR * (x < this.cx ? -1 : 1);\n    subOctant.cy = this.cy + subCR * (y < this.cy ? -1 : 1);\n    subOctant.cz = this.cz + subCR * (z < this.cz ? -1 : 1);\n    subOctant.cr = subCR;\n\n    this[index] = subOctant;\n    return subOctant\n  }\n\n  findMaxSphereRadius() {\n    let maxRadius = 0;\n    if (this.isLeaf) {\n      const data = this.data;\n      if (this.sphereCount > 1) {\n        for (let key in data) {\n          const r = data[key].radius;\n          if (r > maxRadius) maxRadius = r;\n        }\n      } else {\n        maxRadius = data.radius;\n      }\n    } else {\n      for (let i = 0; i < 8; i++) {\n        if (this[i] !== null && this[i].maxRadius > maxRadius) {\n          maxRadius = this[i].maxRadius;\n        }\n      }\n    }\n    return maxRadius\n  }\n\n  updateMaxRadii() {\n    // Find the max maxRadius of the leaf octant's members\n    let maxRadius = this.findMaxSphereRadius();\n\n    // If the max radius has grown, just do a simple increase of the ancestor maxRadius values\n    if (maxRadius > this.maxRadius) {\n      let octant = this;\n      while (octant) {\n        if (maxRadius > octant.maxRadius) {\n          octant.maxRadius = maxRadius;\n        }\n        octant = octant.parent;\n      }\n    }\n    // If the max radius has shrunk, set it and repeat the process up the parent tree\n    else if (maxRadius < this.maxRadius) {\n      this.maxRadius = maxRadius;\n      if (this.parent) {\n        this.parent.updateMaxRadii();\n      }\n    }\n  }\n\n  addSphereData(key, sphere) {\n    const count = this.sphereCount++;\n    if (count === 0) {\n      this.leafCount = 1;\n      this.data = sphere;\n      this.dataKey = key;\n      // copy center coords from the first added sphere\n      const {_roundedX, _roundedY, _roundedZ} = sphere.center;\n      this.dataX = _roundedX;\n      this.dataY = _roundedY;\n      this.dataZ = _roundedZ;\n    }\n    else if (count === 1) {\n      const oldSphere = this.data;\n      const newData = this.data = Object.create(null);\n      newData[this.dataKey] = oldSphere;\n      newData[key] = sphere;\n      this.dataKey = null;\n    }\n    else if (count > 1) {\n      this.data[key] = sphere;\n    }\n\n    if (sphere.radius > this.maxRadius) {\n      this.maxRadius = sphere.radius;\n    }\n  }\n\n  removeSphereData(key) {\n    const data = this.data;\n    if (data) {\n      const count = this.sphereCount--;\n      if (count > 2) {\n        delete data[key];\n      }\n      else if (count === 2) {\n        for (let _key in data) {\n          if (_key !== key) {\n            this.dataKey = _key;\n            this.data = data[_key];\n            break\n          }\n        }\n      }\n      else {\n        this.data = null;\n      }\n    }\n  }\n\n  forEachLeafSphere(fn, scope) {\n    const data = this.data;\n    if (data) {\n      if (this.sphereCount > 1) {\n        for (let key in data) {\n          fn.call(scope, data[key], key);\n        }\n      } else {\n        fn.call(scope, data, this.dataKey);\n      }\n    }\n  }\n}\nassign$2(Octant.prototype, {\n  // Relationships\n  parent: null,\n  index: -1,\n\n  // Cube bounds\n  cx: 0, //center x\n  cy: 0, //center y\n  cz: 0, //center z\n  cr: 0, //cubic radius (dist from center to edge)\n\n  // Sub-octants\n  0: null,\n  1: null,\n  2: null,\n  3: null,\n  4: null,\n  5: null,\n  6: null,\n  7: null,\n\n  // Leaf data\n  // For a single-item leaf (probably the vast majority) `data` will be the Sphere object and `dataKey`\n  // will be its key. For a multi-item leaf, `data` will be an object of key->Sphere mappings and\n  // `dataKey` will be null. I'm not a huge fan of the asymmetry but this lets us avoid an extra\n  // sub-object for the majority of leaves while keeping the Octant's shape predictable for the JS engine.\n  isLeaf: false,\n  data: null,\n  dataKey: null,\n  // The first sphere added to the leaf will have its center position copied for easier access and\n  // to avoid issues with the Sphere objects being mutated elsewhere.\n  dataX: 0,\n  dataY: 0,\n  dataZ: 0,\n\n  // Stats\n  sphereCount: 0,\n  leafCount: 0,\n  maxRadius: 0\n});\n\n\n\nconst _createBranchFromLeaf = (function() {\n  const copyProps = ['parent', 'index', 'cx', 'cy', 'cz', 'cr', 'sphereCount', 'leafCount', 'maxRadius'];\n  return function(leaf) {\n    const branch = new Octant();\n    for (let i = copyProps.length; i--;) {\n      branch[copyProps[i]] = leaf[copyProps[i]];\n    }\n    return branch\n  }\n})();\n\nconst { assign: assign$3 } = utils;\nconst tmpVec2 = new Vector2();\nconst tmpVec3 = new Vector3();\nconst raycaster = new Raycaster();\n\n\nclass World3DFacade extends WorldBaseFacade {\n  constructor(canvas) {\n    super(canvas);\n    this._object3DFacadesById = Object.create(null);\n    this._onBgClick = this._onBgClick.bind(this);\n  }\n\n  afterUpdate() {\n    let {width, height, antialias, backgroundColor, contextAttributes, _element:canvas} = this;\n\n    // Set up renderer\n    let renderer = this._threeRenderer;\n    const RendererClass = this.rendererClass || WebGLRenderer;\n    if (!renderer || !(renderer instanceof RendererClass)) {\n      if (renderer) {\n        renderer.dispose();\n      }\n      // Init the context manually so we can prefer webgl2\n      contextAttributes = assign$3({\n        alpha: true,\n        antialias\n      }, contextAttributes);\n      const context = canvas.getContext('webgl2', contextAttributes) || undefined;\n      if (!context) {\n        console.info('webgl2 init failed, trying webgl');\n      }\n      renderer = this._threeRenderer = new RendererClass(assign$3({\n        canvas,\n        context\n      }, contextAttributes));\n    }\n\n    const shadows = this.shadows;\n    renderer.shadowMap.enabled = !!shadows;\n    if (shadows && typeof shadows === 'object') {\n      assign$3(renderer.shadowMap, shadows);\n    }\n\n    if (backgroundColor !== this._bgColor) {\n      renderer.setClearColor(new Color(backgroundColor || 0), backgroundColor != null ? 1 : 0);\n      this._bgColor = backgroundColor;\n    }\n\n    renderer.outputEncoding = this.outputEncoding || LinearSRGBColorSpace;\n    renderer.toneMapping = this.toneMapping || NoToneMapping;\n\n    // Update render canvas size\n    this._updateDrawingBufferSize(width, height, this.pixelRatio || window.devicePixelRatio || 1);\n\n    super.afterUpdate();\n  }\n\n  describeChildren() {\n    return [\n      this._getCameraDef(),\n      this._getSceneDef()\n    ]\n  }\n\n  /**\n   * Build a normalized definition for the camera facade\n   * @protected\n   */\n  _getCameraDef() {\n    const {camera} = this;\n    return assign$3({\n      key: 'camera',\n      facade: PerspectiveCamera3DFacade,\n      aspect: this.width / this.height\n    }, camera)\n  }\n\n  /**\n   * Build a normalized definition for the scene facade\n   * @protected\n   */\n  _getSceneDef() {\n    return {\n      key: 'scene',\n      facade: Scene3DFacade,\n      lights: this.lights,\n      objects: this.objects,\n      fog: this.fog,\n      background: this.background,\n      environment: this.environment,\n      onClick: this.onBackgroundClick ? this._onBgClick : null\n    }\n  }\n\n  /**\n   * Update the renderer's drawing buffer size\n   * @protected\n   */\n  _updateDrawingBufferSize(width, height, pixelRatio) {\n    const renderer = this._threeRenderer;\n    renderer.getSize(tmpVec2);\n    if (tmpVec2.width !== width || tmpVec2.height !== height || renderer.getPixelRatio() !== pixelRatio) {\n      renderer.setDrawingBufferSize(width, height, pixelRatio);\n    }\n  }\n\n  doRender(/*...frameArgs*/) {\n    let sceneFacade = this.getChildByKey('scene');\n    let scene = sceneFacade.threeObject;\n    let camera = this.getChildByKey('camera').threeObject;\n    let renderer = this._threeRenderer;\n\n    // Invoke any onBeforeRender listeners\n    let registry = this.eventRegistry;\n    function invokeHandler(handler, facadeId) {\n      handler.call(this._object3DFacadesById[facadeId], renderer, scene, camera);\n    }\n    registry.forEachListenerOfType('beforerender', invokeHandler, this);\n\n    // Render scene\n    renderer.render(scene, camera);\n\n    // Invoke any onAfterRender listeners\n    registry.forEachListenerOfType('afterrender', invokeHandler, this);\n\n    let onStatsUpdate = this.onStatsUpdate;\n    if (onStatsUpdate) {\n      const {memory, render} = renderer.info;\n      const stats = {\n        'WebGL Draw Calls': render.calls,\n        'WebGL Geometries': memory.geometries,\n        'WebGL Textures': memory.textures,\n        'WebGL Triangles': render.triangles\n      };\n      if (render.points) {\n        stats['WebGL Points'] = render.points;\n      }\n      if (render.lines) {\n        stats['WebGL Lines'] = render.lines;\n      }\n      onStatsUpdate(stats);\n    }\n  }\n\n  /**\n   * Implementation of abstract\n   */\n  getFacadeUserSpaceXYZ(facade) {\n    let matrixEls = facade.threeObject.matrixWorld.elements;\n    return this.projectWorldPosition(matrixEls[12], matrixEls[13], matrixEls[14])\n  }\n\n  projectWorldPosition(x, y, z) {\n    tmpVec3.set(x, y, z);\n    let camera = this.getChildByKey('camera');\n    camera.updateMatrices();\n    camera = camera.threeObject;\n\n    // Make position relative to camera\n    tmpVec3.applyMatrix4(camera.matrixWorldInverse);\n\n    // Get relative distance to the point, negative if it's behind the camera\n    let signedDistance = tmpVec3.length() * (tmpVec3.z > 0 ? -1 : 1);\n\n    // Project x/y to screen coords\n    tmpVec3.applyMatrix4(camera.projectionMatrix);\n    let screenX = (tmpVec3.x + 1) * this.width / 2;\n    let screenY = (1 - tmpVec3.y) * this.height / 2;\n\n    return new Vector3(screenX, screenY, signedDistance)\n  }\n\n  /**\n   * @override\n   * In 3D worlds, we will normalize all pointer events so they always carry a `ray` property;\n   * handlers for these events should then only rely on that, which is guaranteed to be present,\n   * unlike `clientX/Y` etc. which are only present for pointer events originating from a screen.\n   */\n  _normalizePointerEvent(e) {\n    // All pointer events in a 3D world will be given a `ray` property.\n    if (!e.ray) {\n      // normalize touch events\n      let posInfo = e;\n      if (e.touches) {\n        let touches = /^touch(end|cancel)$/.test(e.type) ? e.changedTouches : e.touches;\n        if (touches.length === 1) {\n          posInfo = touches[0];\n        }\n      }\n\n      // convert mouse position to normalized device coords (-1 to 1)\n      const canvasRect = e.target.getBoundingClientRect(); //e.target is the canvas\n      let width = canvasRect.width || this.width; //use logical size if no visible rect, e.g. offscreen canvas\n      let height = canvasRect.height || this.height;\n      let u = ((posInfo.clientX || 0) - (canvasRect.left || 0)) / width * 2 - 1;\n      let v = ((posInfo.clientY || 0) - (canvasRect.top || 0)) / height * -2 + 1;\n\n      // ensure camera's matrix is up to date\n      let camera = this.getChildByKey('camera');\n      camera.updateMatrices();\n\n      // calculate the ray and put it on the event\n      e.ray = camera.getRayAtProjectedCoords(u, v);\n    }\n\n    super._normalizePointerEvent(e);\n  }\n\n  /**\n   * @override Implementation of abstract\n   * @return {Array<{facade, distance, ?distanceBias, ...}>|null}\n   */\n  getFacadesAtEvent(e, filterFn) {\n    return e.ray ? this.getFacadesOnRay(e.ray, filterFn) : null\n  }\n\n  getFacadesOnRay(ray, filterFn) {\n    // update bounding sphere octree\n    const octree = this._updateOctree();\n\n    // search bounding sphere octree to quickly filter down to a small set of likely hits,\n    // then do a true raycast on those facades\n    let allHits = null;\n    if (octree) {\n      raycaster.ray = ray;\n      octree.forEachSphereOnRay(ray, (sphere, facadeId) => {\n        const facadesById = this._object3DFacadesById;\n        const facade = facadesById && facadesById[facadeId];\n        // let the filterFn eliminate things before trying to raycast them\n        const hits = facade && (!filterFn || filterFn(facade)) && facade.raycast && facade.raycast(raycaster);\n        if (hits && hits[0]) {\n          // Ignore all but closest\n          hits[0].facade = facade\n          ;(allHits || (allHits = [])).push(hits[0]);\n        }\n      });\n    }\n    return allHits\n  }\n\n  _updateOctree() {\n    // update octree with any new bounding spheres\n    let octree = this._boundingSphereOctree;\n    const changes = this._octreeChangeset;\n    if (changes) {\n      if (!octree) {\n        octree = this._boundingSphereOctree = new BoundingSphereOctree();\n      }\n      const {remove, put} = changes;\n      if (remove) {\n        for (let facadeId in remove) {\n          octree.removeSphere(facadeId);\n        }\n      }\n      if (put) {\n        for (let facadeId in put) {\n          // Check for put requests for objects that are now obsolete\n          const facade = this._object3DFacadesById[facadeId];\n          if (facade && !facade.isDestroying && !(remove && remove[facadeId])) {\n            const sphere = facade.getBoundingSphere && facade.getBoundingSphere();\n            if (sphere) {\n              octree.putSphere(facadeId, sphere);\n            } else {\n              octree.removeSphere(facadeId);\n            }\n          }\n        }\n      }\n      this._octreeChangeset = null;\n    }\n    return octree\n  }\n\n  _queueForOctreeChange(changeType, facade) {\n    const changes = this._octreeChangeset || (this._octreeChangeset = {});\n    const map = changes[changeType] || (changes[changeType] = Object.create(null));\n    map[facade.$facadeId] = facade;\n  }\n\n  _onBgClick(e) {\n    // Ignore clicks that bubbled up\n    if (e.target === e.currentTarget) {\n      this.onBackgroundClick(e);\n    }\n  }\n\n  destructor() {\n    super.destructor();\n    this._threeRenderer.dispose();\n  }\n\n}\n\n\n\nWorld3DFacade.prototype._notifyWorldHandlers = assign$3(\n  Object.create(WorldBaseFacade.prototype._notifyWorldHandlers),\n  {\n    getCameraPosition(source, outputVec3) {\n      // We decompose from the world matrix here to handle pose transforms on top of the configured position\n      outputVec3.setFromMatrixPosition(this.getChildByKey('camera').threeObject.matrixWorld);\n    },\n    getCameraFacade(source, data) {\n      data.callback(this.getChildByKey('camera'));\n    },\n    getSceneFacade(source, data) {\n      data.callback(this.getChildByKey('scene'));\n    },\n    projectWorldPosition(source, data) {\n      let pos = data.worldPosition;\n      data.callback(this.projectWorldPosition(pos.x, pos.y, pos.z));\n    },\n    object3DAdded(source) {\n      this._object3DFacadesById[source.$facadeId] = source;\n      this._queueForOctreeChange('put', source);\n    },\n    object3DBoundsChanged(source) {\n      this._queueForOctreeChange('put', source);\n    },\n    object3DRemoved(source) {\n      delete this._object3DFacadesById[source.$facadeId];\n      this._queueForOctreeChange('remove', source);\n    },\n    rayPointerMotion(source, ray) {\n      // Dispatch a custom event carrying the Ray, which will be used by our `getFacadesAtEvent`\n      // override to search for a hovered facade\n      const e = new MouseEvent('mousemove');\n      e.isRayEvent = true;\n      e.ray = ray;\n      e.eventSource = source; //for tracking gesture states per ray source\n      this._onPointerMotionEvent(e);\n    },\n    rayPointerAction(source, eventParams) {\n      // Dispatch a custom event carrying the Ray, which will be used by our `getFacadesAtEvent`\n      // override to search for a hovered facade\n      const e = new (eventParams.type === 'wheel' ? WheelEvent : MouseEvent)(eventParams.type, eventParams);\n      e.isRayEvent = true;\n      e.ray = eventParams.ray;\n      e.eventSource = source; //for tracking gesture states per ray source\n      this._onPointerActionEvent(e);\n    }\n  }\n);\n\nconst refireableEvents = [\n  'onMouseOver',\n  'onMouseOut',\n  'onMouseMove',\n  'onMouseDown',\n  'onMouseUp',\n  'onClick',\n  'onDoubleClick'\n];\n\n\n/**\n * Create and return a higher-order facade class for a given facade class, that can render a\n * Troika sub-world (2D or 3D) into a Three.js `Texture` and supply that texture to\n * the facade. It can then be used by the facade for its own purposes, such as rendering\n * onto a 3D mesh.\n *\n * Pointer events will also be refired within the sub-world at the appropriate coordinates,\n * making the texture's contents interactive. This allows things like presenting a 2D user\n * interface that is mapped onto a 3D mesh.\n *\n * To configure the sub-world, define a `textureWorld` object on the facade's config. It\n * will work like any other facade config, and you'll need to set its `facade` property\n * to use either `World2DFacade` or `World3DFacade` as appropriate.\n *\n * To use the generated texture, access `this.worldTexture`.\n *\n * @param {Facade} WrappedFacadeClass\n * @return {Facade}\n */\nfunction makeWorldTextureProvider(WrappedFacadeClass) {\n\n  return class WorldTextureProvider extends WrappedFacadeClass {\n    constructor(parent) {\n      super(parent);\n      this.worldTexture = new CanvasTexture(); //no canvas yet, will be added in first afterUpdate()\n\n      // Wrap pointer events to both work as normal outer world events and also refire\n      // in the inner world at their point on the surface texture\n      const refire = this._refireAsInnerEvent.bind(this);\n      refireableEvents.forEach(prop => {\n        let userFn;\n        function wrapperFn(e) {\n          refire(e);\n          if (userFn) userFn.call(this, e);\n        }\n\n        // trigger initial registration of event handler\n        this[prop] = wrapperFn;\n\n        // overwrite setter to just update the user-set function, and the getter\n        // to always return the whole wrapper\n        Object.defineProperty(this, prop, {\n          set(val) {\n            userFn = val;\n          },\n          get() {\n            return wrapperFn\n          }\n        });\n      });\n    }\n\n    afterUpdate() {\n      // Init the inner world if needed\n      let innerWorld = this._worldFacade;\n      let newWorldConfig = this.textureWorld;\n      if (!innerWorld || !newWorldConfig || !(innerWorld instanceof newWorldConfig.facade)) {\n        if (innerWorld) {\n          innerWorld.onAfterRender = null;\n          innerWorld.destructor();\n        }\n        if (newWorldConfig) {\n          this.worldTexture.dispose();\n          const canvas = document.createElement('canvas');\n          canvas.width = newWorldConfig.width;\n          canvas.height = newWorldConfig.height;\n          this.worldTexture = new CanvasTexture(canvas);\n          innerWorld = this._worldFacade = new newWorldConfig.facade(canvas);\n\n          // Trigger texture update whenever the inner world is rerendered\n          innerWorld.onAfterRender = () => {\n            this.worldTexture.needsUpdate = true;\n            this.requestRender();\n          };\n        }\n      }\n\n      // Update the inner world\n      if (innerWorld) {\n        innerWorld.renderingScheduler = this._getOuterWorld().renderingScheduler;\n        utils.assign(innerWorld, newWorldConfig, {pixelRatio: 1});\n        innerWorld.afterUpdate();\n      }\n\n      super.afterUpdate();\n    }\n\n    _refireAsInnerEvent(e) {\n      const world = this._worldFacade;\n      if (world) {\n        const uv = e.intersection && e.intersection.uv;\n        const x = uv ? Math.round(uv.x * world.width) : -1;\n        const y = uv ? Math.round((1 - uv.y) * world.height) : -1;\n\n        const nativeEvent = e.nativeEvent || e;\n        const innerEvent = document.createEvent('MouseEvents');\n        innerEvent.initMouseEvent(\n          nativeEvent.type, true, true, window, nativeEvent.detail, x, y, x, y, nativeEvent.ctrlKey,\n          nativeEvent.altKey, nativeEvent.shiftKey, nativeEvent.metaKey, nativeEvent.button, null\n        );\n        this.worldTexture.image.dispatchEvent(innerEvent);\n      }\n    }\n\n    _getOuterWorld() {\n      let outerWorld = this;\n      while(outerWorld && !outerWorld.isWorld) {\n        outerWorld = outerWorld.parent;\n      }\n      return outerWorld\n    }\n\n    destructor() {\n      const world = this._worldFacade;\n      if (world) {\n        world.onAfterRender = null;\n        world.destructor();\n      }\n      this.worldTexture.dispose();\n      super.destructor();\n    }\n  }\n\n}\n\n/**\n * Instanceable3DFacade is a specialized Object3DFacade that renders using GPU\n * instancing. This can give a significant performance boost for objects that\n * are rendered many thousands of times in a scene.\n *\n * Usage is nearly identical to an Object3DFacade, but instead of creating a\n * `threeObject` in the constructor, you set its `instancedThreeObject` property\n * to a common shared Mesh object. Any other Instanceable3DFacades in the scene\n * that reference the same `instancedThreeObject` will be batched together and\n * rendered using a single GPU draw call. The `instancedThreeObject` can be\n * changed at any time, allowing dynamic appearance changes by swapping out the\n * referenced mesh or its geometry or material.\n *\n * == Per-instance values: ==\n *\n * By default, the instances will each be rendered using their own world matrix\n * transform, so they can be positioned/scaled/rotated independently as usual.\n *\n * It is also possible, with a little extra effort, to allow specific shader\n * uniforms such as colors to be varied per instance. This works with both custom\n * shader materials as well as the built-in materials.\n *\n * To enable per-instance uniforms, use the `setInstanceUniform(name, value)`\n * method to set an instance's values for the enabled uniforms:\n *\n *     `this.setInstanceUniform('diffuse', new Color(color))`\n *\n * If an instance does not have a uniform value set this way, it will fall back to using\n * the default value in the material's `uniforms` object.\n *\n * The uniform types that allow instancing are: `int`, `float`, `vec2`, `vec3`, and `vec4`.\n * Mapping from application value types such as `Vector2` or `Color` behaves similarly to\n * how three.js does it internally. More complex uniform types such as textures are not\n * instanceable.\n *\n * == Caveats: ==\n *\n * It is generally not recommended to use this technique on meshes that are semi-\n * transparent, as there is no guarantee that they will be drawn in back-to-front\n * order relative to the camera position.\n */\nclass Instanceable3DFacade extends Object3DFacade {\n  constructor(parent) {\n    let obj = new Object3D();\n\n    // Trigger scene graph size optimizations\n    obj.isRenderable = false;\n\n    // Visibility change affects batching so listen for changes\n    obj.$troikaVisible = obj.visible;\n    Object.defineProperty(obj, 'visible', visibilityPropDef);\n\n    super(parent, obj);\n\n    this.notifyWorld('instanceableAdded');\n  }\n\n  /**\n   * @property {Object3D} instancedThreeObject\n   * Sets the Mesh instance to use for batching this instance with others that\n   * reference the same Mesh.\n   */\n\n  /**\n   * Sets this instance's value for a shader uniform.\n   * @param {String} name\n   * @param {Number|Vector2|Vector3|Vector4|Color} value\n   */\n  setInstanceUniform(name, value) {\n    let values = this._instanceUniforms || (this._instanceUniforms = Object.create(null));\n    if (values[name] !== value) {\n      // If this is a new uniform value, add it to the Set of instance uniform names\n      const obj = this.instancedThreeObject;\n      if (obj && !(name in values)) {\n        const names = obj._instanceUniformNames || (obj._instanceUniformNames = new Set());\n        names.add(name);\n      }\n      values[name] = value;\n      this.notifyWorld('instanceableUniformChanged', name);\n    }\n  }\n\n  afterUpdate() {\n    const newObj = this.instancedThreeObject;\n    const oldObj = this._instancedObj;\n    if (newObj !== oldObj) {\n      if (newObj && this._instanceUniforms) { //make sure new object tracks our instance uniforms\n        const names = newObj._instanceUniformNames || (newObj._instanceUniformNames = new Set());\n        for (let name in this._instanceUniforms) {\n          names.add(name);\n        }\n      }\n      this._instancedObj = newObj;\n      this.notifyWorld('instanceableChanged');\n      this._boundsChanged = true;\n    }\n    super.afterUpdate();\n  }\n\n  updateMatrices() {\n    const prevMatrixVersion = this._worldMatrixVersion;\n\n    super.updateMatrices();\n\n    // If the world matrix changed, we must notify the instancing manager\n    if (this._worldMatrixVersion !== prevMatrixVersion && this.threeObject.$troikaVisible) {\n      this.notifyWorld('instanceableMatrixChanged');\n    }\n  }\n\n  destructor() {\n    this.notifyWorld('instanceableRemoved');\n    super.destructor();\n  }\n\n  // Custom bounding sphere calc\n  getGeometry() {\n    let instancedObj = this.instancedThreeObject;\n    return instancedObj && instancedObj.geometry\n  }\n\n  // Custom raycasting based on current geometry and transform\n  raycast(raycaster) {\n    let {instancedThreeObject, threeObject} = this;\n    if (instancedThreeObject && threeObject) {\n      let origMatrix = instancedThreeObject.matrixWorld;\n      instancedThreeObject.matrixWorld = threeObject.matrixWorld;\n      let result = this._raycastObject(instancedThreeObject, raycaster); //use optimized method\n      instancedThreeObject.matrixWorld = origMatrix;\n      return result\n    }\n    return null\n  }\n}\n\nconst visibilityPropDef = {\n  set(visible) {\n    if (visible !== this.$troikaVisible) {\n      this.$troikaVisible = visible;\n      this.$facade.notifyWorld('instanceableChanged');\n    }\n  },\n  get() {\n    return this.$troikaVisible\n  }\n};\n\n// Predefine shape to facilitate JS engine optimization\nutils.assign(Instanceable3DFacade.prototype, {\n  _lastInstancedMatrixVersion: -1,\n  _instancedThreeObject: null\n});\n\nconst dummyGeometry = new BufferGeometry();\nconst dummyMaterial = new MeshBasicMaterial();\n\nconst MESH_MATERIALS = {\n  'basic': MeshBasicMaterial,\n  'depth': MeshDepthMaterial,\n  'distance': MeshDistanceMaterial,\n  'lambert': MeshLambertMaterial,\n  'matcap': MeshMatcapMaterial,\n  'normal': MeshNormalMaterial,\n  'phong': MeshPhongMaterial,\n  'physical': MeshPhysicalMaterial,\n  'standard': MeshStandardMaterial,\n  'toon': MeshToonMaterial,\n};\n\n\n\n/**\n * A facade for rendering a Mesh. The following properties are supported:\n *\n * @member {Geometry|BufferGeometry} geometry - The geometry instance to be used for this\n *         mesh. It's recommended to use a shared geometry instance between meshes when possible.\n * @member {string|class|Material} material - The type of the material to be used for this mesh. Can either\n *         be a reference to a Material class, a Material instance, or one of the strings in the `MESH_MATERIALS`\n *         enum. Defaults to 'standard'.\n * @member {boolean} autoDisposeGeometry - Whether the geometry should be automatically disposed when this\n *         mesh is removed from the scene. Defaults to `false`. You can set it to `true` as a memory optimization\n *         if the geometry is not expected to return to the scene later, but this is not generally needed.\n * @member {boolean} autoDisposeMaterial - Whether the material's shader program should be automatically disposed\n *         when this mesh is removed from the scene. Defaults to `false`. You can set it to `true` as a memory\n *         optimization if the material uses a custom shader that is not expected to be used again, but this is\n *         not generally needed. Note that this will _not_ dispose any textures assigned to the material.\n *\n * Also, for convenience, properties of the material can be set via `material.*` shortcut properties. For example,\n * passing `{\"material.transparent\": true, \"material.opacity\": 0.5}` will set the material to half-opaque\n * transparency. Colors will call `set` on the Color object for that material property.\n */\nclass MeshFacade extends Object3DFacade {\n  constructor (parent) {\n    super(parent);\n    this.material = 'standard';\n    this.autoDisposeGeometry = false;\n    this.autoDisposeMaterial = false;\n    this._dirtyMtlProps = null;\n  }\n\n  initThreeObject () {\n    return new Mesh(dummyGeometry, dummyMaterial)\n  }\n\n  afterUpdate() {\n    let {geometry, material, threeObject} = this;\n\n    if ((geometry || dummyGeometry) !== threeObject.geometry) {\n      if (this.autoDisposeGeometry) {\n        threeObject.geometry.dispose();\n      }\n      threeObject.geometry = geometry || dummyGeometry;\n    }\n\n    // Resolve `material` prop to a Material instance\n    if (material !== this._lastMtl) {\n      this._lastMtl = material;\n      if (typeof material === 'string') {\n        material = new (MESH_MATERIALS[material] || MeshStandardMaterial)();\n      }\n      else if (material && material.isMaterial) ;\n      else if (typeof material === 'function') {\n        material = new material();\n      }\n      else {\n        material = new MeshStandardMaterial();\n      }\n      if (threeObject.material !== material) {\n        if (this.autoDisposeMaterial) {\n          threeObject.material.dispose();\n        }\n        threeObject.material = material;\n      }\n    }\n\n    // If any of the material setters were called, sync the dirty values to the material\n    const dirties = this._dirtyMtlProps;\n    if (dirties) {\n      threeObject.material.setValues(dirties);\n      this._dirtyMtlProps = null;\n    }\n\n    super.afterUpdate();\n  }\n\n  destructor () {\n    if (this.autoDisposeGeometry) {\n      this.threeObject.geometry.dispose();\n    }\n    if (this.autoDisposeMaterial) {\n      this.threeObject.material.dispose();\n    }\n    super.destructor();\n  }\n}\n\n// For all of the known mesh materials, add `material.*` setters for all of their\n// supported properties. The setters will update a \"dirty\" object which will then be\n// applied to the material during afterUpdate; this lets us only deal with the specific\n// material props that have been set rather than having to iterate over all props.\nconst ignoreMaterialProps = {type:1, id:1, uuid:1, version:1};\nObject.keys(MESH_MATERIALS).forEach(key => {\n  let material = new MESH_MATERIALS[key]();\n  for (let mtlProp in material) {\n    if (material.hasOwnProperty(mtlProp) && !ignoreMaterialProps.hasOwnProperty(mtlProp)) {\n      Object.defineProperty(MeshFacade.prototype, `material.${mtlProp}`, {\n        enumerable: true,\n        configurable: true,\n        get() {\n          const dirties = this._dirtyMtlProps;\n          return (dirties && mtlProp in dirties) ? dirties[mtlProp] : this.threeObject.material[mtlProp]\n        },\n        set(value) {\n          const dirties = this._dirtyMtlProps || (this._dirtyMtlProps = Object.create(null));\n          dirties[mtlProp] = value;\n        }\n      });\n    }\n  }\n});\n\n/**\n * Return a singleton instance of a 1x1x1 BoxGeometry\n * @type {function(): BoxGeometry}\n */\nconst getBoxGeometry = utils.memoize(() => {\n  return new BoxGeometry(1, 1, 1, 1, 1)\n});\n\n\n/**\n * A simple box, centered on the origin.\n * The `width` property controls x scale, the `height` property controls y scale, and the `depth`\n * property controls z scale.\n * To control the material, see {@link MeshFacade}.\n */\nclass BoxFacade extends MeshFacade {\n  get geometry() {\n    return getBoxGeometry()\n  }\n\n  set width(width) {\n    this.scaleX = width;\n  }\n  get width() {\n    return this.scaleX\n  }\n\n  set height(height) {\n    this.scaleY = height;\n  }\n  get height() {\n    return this.scaleY\n  }\n\n  set depth(width) {\n    this.scaleZ = width;\n  }\n  get depth() {\n    return this.scaleZ\n  }\n}\n\nconst geometries = Object.create(null, [\n  ['low', 32],\n  ['medium', 64],\n  ['high', 128]\n].reduce((descr, [name, segments]) => {\n  descr[name] = {\n    get: utils.memoize(() =>\n      new CircleGeometry(1, segments).rotateX(-Math.PI / 2)\n    )\n  };\n  return descr\n}, {}));\n\nfunction getCircleGeometry(detail) {\n  return geometries[detail] || geometries.medium\n}\n\n/**\n * A simple planar circle, laying along the x-z plane, facing the positive y axis, centered on the origin.\n * The `radius` property is an alias to uniform `scaleX` and `scaleZ`. Set `scaleX/Y/Z` individually if\n * you need non-uniform scaling.\n * The `detail` property allows selecting a LOD; its values can be 'low', 'medium', or 'high'.\n * To control the material, see {@link MeshFacade}.\n */\nclass CircleFacade extends MeshFacade {\n  constructor (parent) {\n    super(parent);\n    this['material.side'] = this['material.shadowSide'] = DoubleSide;\n  }\n\n  get geometry() {\n    return getCircleGeometry(this.detail)\n  }\n\n  set radius(r) {\n    this.scaleX = this.scaleZ = r;\n  }\n  get radius() {\n    return this.scaleX\n  }\n}\n\n/**\n * A simple cube, centered on the origin.\n * The `size` property sets the uniform edge length. For non-uniform boxes, use {@link BoxFacade.js#Box}\n * To control the material, see {@link MeshFacade}.\n */\nclass CubeFacade extends MeshFacade {\n  get geometry() {\n    return getBoxGeometry()\n  }\n\n  set size(size) {\n    this.scale = size;\n  }\n  get size() {\n    return this.scale\n  }\n}\n\nconst getGeometry = utils.memoize(() => {\n  return new PlaneGeometry(1, 1, 1, 1).rotateX(-Math.PI / 2)\n});\n\n/**\n * A simple rectangular plane, laying along the x-z plane, facing the positive y axis, centered on the origin.\n * The `width` property controls x scale and the `depth` property controls z scale.\n * To control the material, see {@link MeshFacade}.\n */\nclass PlaneFacade extends MeshFacade {\n  constructor (parent) {\n    super(parent);\n    this['material.side'] = this['material.shadowSide'] = DoubleSide;\n  }\n\n  get geometry() {\n    return getGeometry()\n  }\n\n  set width(width) {\n    this.scaleX = width;\n  }\n  get width() {\n    return this.scaleX\n  }\n\n  set depth(width) {\n    this.scaleZ = width;\n  }\n  get depth() {\n    return this.scaleZ\n  }\n}\n\nconst geometries$1 = Object.create(null, [\n  ['low', 16, 12],\n  ['medium', 32, 24],\n  ['high', 64, 48]\n].reduce((descr, [name, wSegs, hSegs]) => {\n  descr[name] = {\n    get: utils.memoize(() => new SphereGeometry(1, wSegs, hSegs))\n  };\n  return descr\n}, {}));\n\nfunction getSphereGeometry(detail) {\n  return geometries$1[detail] || geometries$1.medium\n}\n\n/**\n * A simple sphere, centered on the origin.\n * The `radius` property is an alias to the uniform `scale`. Set `scaleX/Y/Z` individually if\n * you need non-uniform scaling.\n * The `detail` property allows selecting a LOD; its values can be 'low', 'medium', or 'high'.\n * To control the material, see {@link MeshFacade}.\n */\nclass SphereFacade extends MeshFacade {\n  get geometry() {\n    return getSphereGeometry(this.detail)\n  }\n\n  set radius(r) {\n    this.scale = r;\n  }\n  get radius() {\n    return this.scale\n  }\n}\n\nclass Canvas3D extends ReactCanvasBase {\n  constructor(props) {\n    super(props);\n    this._onCanvasRef = canvas => {\n      let fn = this.context.onCanvasRef;\n      if (fn) fn(canvas);\n      fn = this.props.onCanvasRef;\n      if (fn) fn(canvas);\n    };\n  }\n\n  render() {\n    const {props, context} = this;\n    return React.createElement(\n      ReactCanvasBase,\n      utils.assign({}, props, {\n        onCanvasRef: this._onCanvasRef,\n        canvasStyle: props.canvasStyle || context.canvasStyle,\n        worldFacade: props.worldFacade || context.worldFacade || World3DFacade,\n        worldProps: utils.assign(\n          {\n            antialias: props.antialias,\n            rendererClass: props.rendererClass,\n            backgroundColor: props.backgroundColor,\n            background: props.background,\n            environment: props.environment,\n            outputEncoding: props.outputEncoding,\n            toneMapping: props.toneMapping,\n            shadows: props.shadows,\n            camera: props.camera,\n            lights: props.lights,\n            objects: props.objects,\n            fog: props.fog,\n            onBackgroundClick: props.onBackgroundClick\n          },\n          context.worldProps,\n          props.worldProps\n        )\n      }),\n      props.children\n    )\n  }\n}\n\nCanvas3D.displayName = 'Canvas3D';\n\nCanvas3D.propTypes = utils.assignIf(\n  {\n    backgroundColor: T.any,\n    background: T.any,\n    environment: T.any,\n    outputEncoding: T.number,\n    toneMapping: T.number,\n    lights: T.array,\n    camera: T.object,\n    fog: T.object,\n    objects: T.oneOfType([T.array, T.object]).isRequired,\n    antialias: T.bool,\n    onBackgroundClick: T.func,\n    rendererClass: T.func\n  },\n  ReactCanvasBase.commonPropTypes\n);\n\n/**\n * Ancestors React components may provide these context values to override\n * how the world is created, e.g. switching to a WebXR-aware world impl\n */\nCanvas3D.contextType = React.createContext({\n  worldFacade: World3DFacade,\n  worldProps: {},\n  onCanvasRef: null,\n  canvasStyle: null\n});\n\nexport { AmbientLight3DFacade, BoxFacade, Canvas3D, CircleFacade, CubeFacade, DirectionalLight3DFacade, Group3DFacade, HemisphereLight3DFacade, HtmlOverlay3DFacade, Instanceable3DFacade, InstancingManager, MeshFacade, Object3DFacade, OrthographicCamera3DFacade, PerspectiveCamera3DFacade, PlaneFacade, PointLight3DFacade, RectAreaLight3DFacade, Scene3DFacade, SphereFacade, SpotLight3DFacade, World3DFacade, makeWorldTextureProvider };\n"],
  "mappings": "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",
  "names": ["_assign", "ReactDebugCurrentFrame", "getIdForObject", "len", "proto", "actuallySet", "tween", "React", "T", "import_react", "import_prop_types", "assign", "forOwn", "raycaster", "noop", "_worldMatrixVersion", "_projectionMatrixVersion", "attrs", "geometries", "React", "T"]
}
